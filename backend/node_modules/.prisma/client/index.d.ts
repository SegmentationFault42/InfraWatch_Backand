
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Sessions
 * 
 */
export type Sessions = $Result.DefaultSelection<Prisma.$SessionsPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Audit_logs
 * 
 */
export type Audit_logs = $Result.DefaultSelection<Prisma.$Audit_logsPayload>
/**
 * Model System
 * 
 */
export type System = $Result.DefaultSelection<Prisma.$SystemPayload>
/**
 * Model StatusLog
 * 
 */
export type StatusLog = $Result.DefaultSelection<Prisma.$StatusLogPayload>
/**
 * Model Alert
 * 
 */
export type Alert = $Result.DefaultSelection<Prisma.$AlertPayload>
/**
 * Model SlaConfig
 * 
 */
export type SlaConfig = $Result.DefaultSelection<Prisma.$SlaConfigPayload>
/**
 * Model SlaReport
 * 
 */
export type SlaReport = $Result.DefaultSelection<Prisma.$SlaReportPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  admin: 'admin',
  operator: 'operator',
  viewer: 'viewer'
};

export type Role = (typeof Role)[keyof typeof Role]


export const MonitorType: {
  http: 'http',
  https: 'https',
  ping: 'ping',
  tcp: 'tcp'
};

export type MonitorType = (typeof MonitorType)[keyof typeof MonitorType]


export const SystemStatus: {
  up: 'up',
  down: 'down',
  warning: 'warning',
  unknown: 'unknown'
};

export type SystemStatus = (typeof SystemStatus)[keyof typeof SystemStatus]


export const AlertSeverity: {
  critical: 'critical',
  warning: 'warning',
  info: 'info'
};

export type AlertSeverity = (typeof AlertSeverity)[keyof typeof AlertSeverity]


export const AlertStatus: {
  active: 'active',
  resolved: 'resolved',
  acknowledged: 'acknowledged'
};

export type AlertStatus = (typeof AlertStatus)[keyof typeof AlertStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type MonitorType = $Enums.MonitorType

export const MonitorType: typeof $Enums.MonitorType

export type SystemStatus = $Enums.SystemStatus

export const SystemStatus: typeof $Enums.SystemStatus

export type AlertSeverity = $Enums.AlertSeverity

export const AlertSeverity: typeof $Enums.AlertSeverity

export type AlertStatus = $Enums.AlertStatus

export const AlertStatus: typeof $Enums.AlertStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Sessions
 * const sessions = await prisma.sessions.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Sessions
   * const sessions = await prisma.sessions.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.sessions`: Exposes CRUD operations for the **Sessions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.sessions.findMany()
    * ```
    */
  get sessions(): Prisma.SessionsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.audit_logs`: Exposes CRUD operations for the **Audit_logs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Audit_logs
    * const audit_logs = await prisma.audit_logs.findMany()
    * ```
    */
  get audit_logs(): Prisma.Audit_logsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.system`: Exposes CRUD operations for the **System** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Systems
    * const systems = await prisma.system.findMany()
    * ```
    */
  get system(): Prisma.SystemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.statusLog`: Exposes CRUD operations for the **StatusLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StatusLogs
    * const statusLogs = await prisma.statusLog.findMany()
    * ```
    */
  get statusLog(): Prisma.StatusLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alert`: Exposes CRUD operations for the **Alert** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alerts
    * const alerts = await prisma.alert.findMany()
    * ```
    */
  get alert(): Prisma.AlertDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.slaConfig`: Exposes CRUD operations for the **SlaConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SlaConfigs
    * const slaConfigs = await prisma.slaConfig.findMany()
    * ```
    */
  get slaConfig(): Prisma.SlaConfigDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.slaReport`: Exposes CRUD operations for the **SlaReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SlaReports
    * const slaReports = await prisma.slaReport.findMany()
    * ```
    */
  get slaReport(): Prisma.SlaReportDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Sessions: 'Sessions',
    User: 'User',
    Audit_logs: 'Audit_logs',
    System: 'System',
    StatusLog: 'StatusLog',
    Alert: 'Alert',
    SlaConfig: 'SlaConfig',
    SlaReport: 'SlaReport'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "sessions" | "user" | "audit_logs" | "system" | "statusLog" | "alert" | "slaConfig" | "slaReport"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Sessions: {
        payload: Prisma.$SessionsPayload<ExtArgs>
        fields: Prisma.SessionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          findFirst: {
            args: Prisma.SessionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          findMany: {
            args: Prisma.SessionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>[]
          }
          create: {
            args: Prisma.SessionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          createMany: {
            args: Prisma.SessionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          update: {
            args: Prisma.SessionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          deleteMany: {
            args: Prisma.SessionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionsPayload>
          }
          aggregate: {
            args: Prisma.SessionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessions>
          }
          groupBy: {
            args: Prisma.SessionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionsCountArgs<ExtArgs>
            result: $Utils.Optional<SessionsCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Audit_logs: {
        payload: Prisma.$Audit_logsPayload<ExtArgs>
        fields: Prisma.Audit_logsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.Audit_logsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.Audit_logsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          findFirst: {
            args: Prisma.Audit_logsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.Audit_logsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          findMany: {
            args: Prisma.Audit_logsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>[]
          }
          create: {
            args: Prisma.Audit_logsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          createMany: {
            args: Prisma.Audit_logsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.Audit_logsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          update: {
            args: Prisma.Audit_logsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          deleteMany: {
            args: Prisma.Audit_logsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.Audit_logsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.Audit_logsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$Audit_logsPayload>
          }
          aggregate: {
            args: Prisma.Audit_logsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAudit_logs>
          }
          groupBy: {
            args: Prisma.Audit_logsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Audit_logsGroupByOutputType>[]
          }
          count: {
            args: Prisma.Audit_logsCountArgs<ExtArgs>
            result: $Utils.Optional<Audit_logsCountAggregateOutputType> | number
          }
        }
      }
      System: {
        payload: Prisma.$SystemPayload<ExtArgs>
        fields: Prisma.SystemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findFirst: {
            args: Prisma.SystemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          findMany: {
            args: Prisma.SystemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>[]
          }
          create: {
            args: Prisma.SystemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          createMany: {
            args: Prisma.SystemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          update: {
            args: Prisma.SystemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          deleteMany: {
            args: Prisma.SystemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemPayload>
          }
          aggregate: {
            args: Prisma.SystemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystem>
          }
          groupBy: {
            args: Prisma.SystemGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemCountArgs<ExtArgs>
            result: $Utils.Optional<SystemCountAggregateOutputType> | number
          }
        }
      }
      StatusLog: {
        payload: Prisma.$StatusLogPayload<ExtArgs>
        fields: Prisma.StatusLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StatusLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StatusLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          findFirst: {
            args: Prisma.StatusLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StatusLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          findMany: {
            args: Prisma.StatusLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>[]
          }
          create: {
            args: Prisma.StatusLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          createMany: {
            args: Prisma.StatusLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.StatusLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          update: {
            args: Prisma.StatusLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          deleteMany: {
            args: Prisma.StatusLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StatusLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StatusLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StatusLogPayload>
          }
          aggregate: {
            args: Prisma.StatusLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStatusLog>
          }
          groupBy: {
            args: Prisma.StatusLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<StatusLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.StatusLogCountArgs<ExtArgs>
            result: $Utils.Optional<StatusLogCountAggregateOutputType> | number
          }
        }
      }
      Alert: {
        payload: Prisma.$AlertPayload<ExtArgs>
        fields: Prisma.AlertFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlertFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlertFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findFirst: {
            args: Prisma.AlertFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlertFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          findMany: {
            args: Prisma.AlertFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>[]
          }
          create: {
            args: Prisma.AlertCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          createMany: {
            args: Prisma.AlertCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AlertDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          update: {
            args: Prisma.AlertUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          deleteMany: {
            args: Prisma.AlertDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlertUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AlertUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlertPayload>
          }
          aggregate: {
            args: Prisma.AlertAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlert>
          }
          groupBy: {
            args: Prisma.AlertGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlertGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlertCountArgs<ExtArgs>
            result: $Utils.Optional<AlertCountAggregateOutputType> | number
          }
        }
      }
      SlaConfig: {
        payload: Prisma.$SlaConfigPayload<ExtArgs>
        fields: Prisma.SlaConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SlaConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SlaConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          findFirst: {
            args: Prisma.SlaConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SlaConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          findMany: {
            args: Prisma.SlaConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>[]
          }
          create: {
            args: Prisma.SlaConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          createMany: {
            args: Prisma.SlaConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SlaConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          update: {
            args: Prisma.SlaConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          deleteMany: {
            args: Prisma.SlaConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SlaConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SlaConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaConfigPayload>
          }
          aggregate: {
            args: Prisma.SlaConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSlaConfig>
          }
          groupBy: {
            args: Prisma.SlaConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<SlaConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.SlaConfigCountArgs<ExtArgs>
            result: $Utils.Optional<SlaConfigCountAggregateOutputType> | number
          }
        }
      }
      SlaReport: {
        payload: Prisma.$SlaReportPayload<ExtArgs>
        fields: Prisma.SlaReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SlaReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SlaReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          findFirst: {
            args: Prisma.SlaReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SlaReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          findMany: {
            args: Prisma.SlaReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>[]
          }
          create: {
            args: Prisma.SlaReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          createMany: {
            args: Prisma.SlaReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SlaReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          update: {
            args: Prisma.SlaReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          deleteMany: {
            args: Prisma.SlaReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SlaReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SlaReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SlaReportPayload>
          }
          aggregate: {
            args: Prisma.SlaReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSlaReport>
          }
          groupBy: {
            args: Prisma.SlaReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<SlaReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.SlaReportCountArgs<ExtArgs>
            result: $Utils.Optional<SlaReportCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    sessions?: SessionsOmit
    user?: UserOmit
    audit_logs?: Audit_logsOmit
    system?: SystemOmit
    statusLog?: StatusLogOmit
    alert?: AlertOmit
    slaConfig?: SlaConfigOmit
    slaReport?: SlaReportOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    systems: number
    alerts_ack: number
    audit_logs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    systems?: boolean | UserCountOutputTypeCountSystemsArgs
    alerts_ack?: boolean | UserCountOutputTypeCountAlerts_ackArgs
    audit_logs?: boolean | UserCountOutputTypeCountAudit_logsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSystemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAlerts_ackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAudit_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Audit_logsWhereInput
  }


  /**
   * Count Type SystemCountOutputType
   */

  export type SystemCountOutputType = {
    status_logs: number
    alerts: number
    sla_reports: number
  }

  export type SystemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status_logs?: boolean | SystemCountOutputTypeCountStatus_logsArgs
    alerts?: boolean | SystemCountOutputTypeCountAlertsArgs
    sla_reports?: boolean | SystemCountOutputTypeCountSla_reportsArgs
  }

  // Custom InputTypes
  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemCountOutputType
     */
    select?: SystemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeCountStatus_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusLogWhereInput
  }

  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeCountAlertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
  }

  /**
   * SystemCountOutputType without action
   */
  export type SystemCountOutputTypeCountSla_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SlaReportWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Sessions
   */

  export type AggregateSessions = {
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  export type SessionsMinAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type SessionsMaxAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type SessionsCountAggregateOutputType = {
    sid: number
    sess: number
    expire: number
    _all: number
  }


  export type SessionsMinAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type SessionsMaxAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type SessionsCountAggregateInputType = {
    sid?: true
    sess?: true
    expire?: true
    _all?: true
  }

  export type SessionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to aggregate.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionsMaxAggregateInputType
  }

  export type GetSessionsAggregateType<T extends SessionsAggregateArgs> = {
        [P in keyof T & keyof AggregateSessions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessions[P]>
      : GetScalarType<T[P], AggregateSessions[P]>
  }




  export type SessionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionsWhereInput
    orderBy?: SessionsOrderByWithAggregationInput | SessionsOrderByWithAggregationInput[]
    by: SessionsScalarFieldEnum[] | SessionsScalarFieldEnum
    having?: SessionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionsCountAggregateInputType | true
    _min?: SessionsMinAggregateInputType
    _max?: SessionsMaxAggregateInputType
  }

  export type SessionsGroupByOutputType = {
    sid: string
    sess: JsonValue
    expire: Date
    _count: SessionsCountAggregateOutputType | null
    _min: SessionsMinAggregateOutputType | null
    _max: SessionsMaxAggregateOutputType | null
  }

  type GetSessionsGroupByPayload<T extends SessionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionsGroupByOutputType[P]>
            : GetScalarType<T[P], SessionsGroupByOutputType[P]>
        }
      >
    >


  export type SessionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["sessions"]>



  export type SessionsSelectScalar = {
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }

  export type SessionsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sid" | "sess" | "expire", ExtArgs["result"]["sessions"]>

  export type $SessionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Sessions"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      sid: string
      sess: Prisma.JsonValue
      expire: Date
    }, ExtArgs["result"]["sessions"]>
    composites: {}
  }

  type SessionsGetPayload<S extends boolean | null | undefined | SessionsDefaultArgs> = $Result.GetResult<Prisma.$SessionsPayload, S>

  type SessionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionsCountAggregateInputType | true
    }

  export interface SessionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Sessions'], meta: { name: 'Sessions' } }
    /**
     * Find zero or one Sessions that matches the filter.
     * @param {SessionsFindUniqueArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionsFindUniqueArgs>(args: SelectSubset<T, SessionsFindUniqueArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Sessions that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionsFindUniqueOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionsFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionsFindFirstArgs>(args?: SelectSubset<T, SessionsFindFirstArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Sessions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindFirstOrThrowArgs} args - Arguments to find a Sessions
     * @example
     * // Get one Sessions
     * const sessions = await prisma.sessions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionsFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.sessions.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.sessions.findMany({ take: 10 })
     * 
     * // Only select the `sid`
     * const sessionsWithSidOnly = await prisma.sessions.findMany({ select: { sid: true } })
     * 
     */
    findMany<T extends SessionsFindManyArgs>(args?: SelectSubset<T, SessionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Sessions.
     * @param {SessionsCreateArgs} args - Arguments to create a Sessions.
     * @example
     * // Create one Sessions
     * const Sessions = await prisma.sessions.create({
     *   data: {
     *     // ... data to create a Sessions
     *   }
     * })
     * 
     */
    create<T extends SessionsCreateArgs>(args: SelectSubset<T, SessionsCreateArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionsCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const sessions = await prisma.sessions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionsCreateManyArgs>(args?: SelectSubset<T, SessionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Sessions.
     * @param {SessionsDeleteArgs} args - Arguments to delete one Sessions.
     * @example
     * // Delete one Sessions
     * const Sessions = await prisma.sessions.delete({
     *   where: {
     *     // ... filter to delete one Sessions
     *   }
     * })
     * 
     */
    delete<T extends SessionsDeleteArgs>(args: SelectSubset<T, SessionsDeleteArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Sessions.
     * @param {SessionsUpdateArgs} args - Arguments to update one Sessions.
     * @example
     * // Update one Sessions
     * const sessions = await prisma.sessions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionsUpdateArgs>(args: SelectSubset<T, SessionsUpdateArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionsDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.sessions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionsDeleteManyArgs>(args?: SelectSubset<T, SessionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const sessions = await prisma.sessions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionsUpdateManyArgs>(args: SelectSubset<T, SessionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Sessions.
     * @param {SessionsUpsertArgs} args - Arguments to update or create a Sessions.
     * @example
     * // Update or create a Sessions
     * const sessions = await prisma.sessions.upsert({
     *   create: {
     *     // ... data to create a Sessions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sessions we want to update
     *   }
     * })
     */
    upsert<T extends SessionsUpsertArgs>(args: SelectSubset<T, SessionsUpsertArgs<ExtArgs>>): Prisma__SessionsClient<$Result.GetResult<Prisma.$SessionsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.sessions.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionsCountArgs>(
      args?: Subset<T, SessionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionsAggregateArgs>(args: Subset<T, SessionsAggregateArgs>): Prisma.PrismaPromise<GetSessionsAggregateType<T>>

    /**
     * Group by Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionsGroupByArgs['orderBy'] }
        : { orderBy?: SessionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Sessions model
   */
  readonly fields: SessionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Sessions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Sessions model
   */
  interface SessionsFieldRefs {
    readonly sid: FieldRef<"Sessions", 'String'>
    readonly sess: FieldRef<"Sessions", 'Json'>
    readonly expire: FieldRef<"Sessions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Sessions findUnique
   */
  export type SessionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions findUniqueOrThrow
   */
  export type SessionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions findFirst
   */
  export type SessionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions findFirstOrThrow
   */
  export type SessionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions findMany
   */
  export type SessionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionsOrderByWithRelationInput | SessionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionsScalarFieldEnum | SessionsScalarFieldEnum[]
  }

  /**
   * Sessions create
   */
  export type SessionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * The data needed to create a Sessions.
     */
    data: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
  }

  /**
   * Sessions createMany
   */
  export type SessionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionsCreateManyInput | SessionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Sessions update
   */
  export type SessionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * The data needed to update a Sessions.
     */
    data: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
    /**
     * Choose, which Sessions to update.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions updateMany
   */
  export type SessionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionsUpdateManyMutationInput, SessionsUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionsWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Sessions upsert
   */
  export type SessionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * The filter to search for the Sessions to update in case it exists.
     */
    where: SessionsWhereUniqueInput
    /**
     * In case the Sessions found by the `where` argument doesn't exist, create a new Sessions with this data.
     */
    create: XOR<SessionsCreateInput, SessionsUncheckedCreateInput>
    /**
     * In case the Sessions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionsUpdateInput, SessionsUncheckedUpdateInput>
  }

  /**
   * Sessions delete
   */
  export type SessionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
    /**
     * Filter which Sessions to delete.
     */
    where: SessionsWhereUniqueInput
  }

  /**
   * Sessions deleteMany
   */
  export type SessionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionsWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Sessions without action
   */
  export type SessionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Sessions
     */
    select?: SessionsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Sessions
     */
    omit?: SessionsOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    first_name: string | null
    last_name: string | null
    profile_image_url: string | null
    role: $Enums.Role | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    first_name: string | null
    last_name: string | null
    profile_image_url: string | null
    role: $Enums.Role | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    first_name: number
    last_name: number
    profile_image_url: number
    role: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    first_name?: true
    last_name?: true
    profile_image_url?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    first_name?: true
    last_name?: true
    profile_image_url?: true
    role?: true
    created_at?: true
    updated_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    first_name?: true
    last_name?: true
    profile_image_url?: true
    role?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url: string | null
    role: $Enums.Role
    created_at: Date
    updated_at: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    first_name?: boolean
    last_name?: boolean
    profile_image_url?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
    systems?: boolean | User$systemsArgs<ExtArgs>
    alerts_ack?: boolean | User$alerts_ackArgs<ExtArgs>
    audit_logs?: boolean | User$audit_logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    first_name?: boolean
    last_name?: boolean
    profile_image_url?: boolean
    role?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "first_name" | "last_name" | "profile_image_url" | "role" | "created_at" | "updated_at", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    systems?: boolean | User$systemsArgs<ExtArgs>
    alerts_ack?: boolean | User$alerts_ackArgs<ExtArgs>
    audit_logs?: boolean | User$audit_logsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      systems: Prisma.$SystemPayload<ExtArgs>[]
      alerts_ack: Prisma.$AlertPayload<ExtArgs>[]
      audit_logs: Prisma.$Audit_logsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      first_name: string
      last_name: string
      profile_image_url: string | null
      role: $Enums.Role
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    systems<T extends User$systemsArgs<ExtArgs> = {}>(args?: Subset<T, User$systemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alerts_ack<T extends User$alerts_ackArgs<ExtArgs> = {}>(args?: Subset<T, User$alerts_ackArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    audit_logs<T extends User$audit_logsArgs<ExtArgs> = {}>(args?: Subset<T, User$audit_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly first_name: FieldRef<"User", 'String'>
    readonly last_name: FieldRef<"User", 'String'>
    readonly profile_image_url: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly created_at: FieldRef<"User", 'DateTime'>
    readonly updated_at: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.systems
   */
  export type User$systemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    where?: SystemWhereInput
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    cursor?: SystemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * User.alerts_ack
   */
  export type User$alerts_ackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * User.audit_logs
   */
  export type User$audit_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    where?: Audit_logsWhereInput
    orderBy?: Audit_logsOrderByWithRelationInput | Audit_logsOrderByWithRelationInput[]
    cursor?: Audit_logsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Audit_logsScalarFieldEnum | Audit_logsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Audit_logs
   */

  export type AggregateAudit_logs = {
    _count: Audit_logsCountAggregateOutputType | null
    _avg: Audit_logsAvgAggregateOutputType | null
    _sum: Audit_logsSumAggregateOutputType | null
    _min: Audit_logsMinAggregateOutputType | null
    _max: Audit_logsMaxAggregateOutputType | null
  }

  export type Audit_logsAvgAggregateOutputType = {
    status_code: number | null
    duration_ms: number | null
  }

  export type Audit_logsSumAggregateOutputType = {
    status_code: number | null
    duration_ms: number | null
  }

  export type Audit_logsMinAggregateOutputType = {
    id: string | null
    user_id: string | null
    method: string | null
    url: string | null
    ip: string | null
    status_code: number | null
    duration_ms: number | null
    params: string | null
    query: string | null
    body: string | null
    timestamp: Date | null
  }

  export type Audit_logsMaxAggregateOutputType = {
    id: string | null
    user_id: string | null
    method: string | null
    url: string | null
    ip: string | null
    status_code: number | null
    duration_ms: number | null
    params: string | null
    query: string | null
    body: string | null
    timestamp: Date | null
  }

  export type Audit_logsCountAggregateOutputType = {
    id: number
    user_id: number
    method: number
    url: number
    ip: number
    status_code: number
    duration_ms: number
    params: number
    query: number
    body: number
    timestamp: number
    _all: number
  }


  export type Audit_logsAvgAggregateInputType = {
    status_code?: true
    duration_ms?: true
  }

  export type Audit_logsSumAggregateInputType = {
    status_code?: true
    duration_ms?: true
  }

  export type Audit_logsMinAggregateInputType = {
    id?: true
    user_id?: true
    method?: true
    url?: true
    ip?: true
    status_code?: true
    duration_ms?: true
    params?: true
    query?: true
    body?: true
    timestamp?: true
  }

  export type Audit_logsMaxAggregateInputType = {
    id?: true
    user_id?: true
    method?: true
    url?: true
    ip?: true
    status_code?: true
    duration_ms?: true
    params?: true
    query?: true
    body?: true
    timestamp?: true
  }

  export type Audit_logsCountAggregateInputType = {
    id?: true
    user_id?: true
    method?: true
    url?: true
    ip?: true
    status_code?: true
    duration_ms?: true
    params?: true
    query?: true
    body?: true
    timestamp?: true
    _all?: true
  }

  export type Audit_logsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audit_logs to aggregate.
     */
    where?: Audit_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audit_logs to fetch.
     */
    orderBy?: Audit_logsOrderByWithRelationInput | Audit_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: Audit_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audit_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audit_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Audit_logs
    **/
    _count?: true | Audit_logsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Audit_logsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Audit_logsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Audit_logsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Audit_logsMaxAggregateInputType
  }

  export type GetAudit_logsAggregateType<T extends Audit_logsAggregateArgs> = {
        [P in keyof T & keyof AggregateAudit_logs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAudit_logs[P]>
      : GetScalarType<T[P], AggregateAudit_logs[P]>
  }




  export type Audit_logsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: Audit_logsWhereInput
    orderBy?: Audit_logsOrderByWithAggregationInput | Audit_logsOrderByWithAggregationInput[]
    by: Audit_logsScalarFieldEnum[] | Audit_logsScalarFieldEnum
    having?: Audit_logsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Audit_logsCountAggregateInputType | true
    _avg?: Audit_logsAvgAggregateInputType
    _sum?: Audit_logsSumAggregateInputType
    _min?: Audit_logsMinAggregateInputType
    _max?: Audit_logsMaxAggregateInputType
  }

  export type Audit_logsGroupByOutputType = {
    id: string
    user_id: string | null
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params: string | null
    query: string | null
    body: string | null
    timestamp: Date
    _count: Audit_logsCountAggregateOutputType | null
    _avg: Audit_logsAvgAggregateOutputType | null
    _sum: Audit_logsSumAggregateOutputType | null
    _min: Audit_logsMinAggregateOutputType | null
    _max: Audit_logsMaxAggregateOutputType | null
  }

  type GetAudit_logsGroupByPayload<T extends Audit_logsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Audit_logsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Audit_logsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Audit_logsGroupByOutputType[P]>
            : GetScalarType<T[P], Audit_logsGroupByOutputType[P]>
        }
      >
    >


  export type Audit_logsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    method?: boolean
    url?: boolean
    ip?: boolean
    status_code?: boolean
    duration_ms?: boolean
    params?: boolean
    query?: boolean
    body?: boolean
    timestamp?: boolean
    user?: boolean | Audit_logs$userArgs<ExtArgs>
  }, ExtArgs["result"]["audit_logs"]>



  export type Audit_logsSelectScalar = {
    id?: boolean
    user_id?: boolean
    method?: boolean
    url?: boolean
    ip?: boolean
    status_code?: boolean
    duration_ms?: boolean
    params?: boolean
    query?: boolean
    body?: boolean
    timestamp?: boolean
  }

  export type Audit_logsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "method" | "url" | "ip" | "status_code" | "duration_ms" | "params" | "query" | "body" | "timestamp", ExtArgs["result"]["audit_logs"]>
  export type Audit_logsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Audit_logs$userArgs<ExtArgs>
  }

  export type $Audit_logsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Audit_logs"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      user_id: string | null
      method: string
      url: string
      ip: string
      status_code: number
      duration_ms: number
      params: string | null
      query: string | null
      body: string | null
      timestamp: Date
    }, ExtArgs["result"]["audit_logs"]>
    composites: {}
  }

  type Audit_logsGetPayload<S extends boolean | null | undefined | Audit_logsDefaultArgs> = $Result.GetResult<Prisma.$Audit_logsPayload, S>

  type Audit_logsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<Audit_logsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Audit_logsCountAggregateInputType | true
    }

  export interface Audit_logsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Audit_logs'], meta: { name: 'Audit_logs' } }
    /**
     * Find zero or one Audit_logs that matches the filter.
     * @param {Audit_logsFindUniqueArgs} args - Arguments to find a Audit_logs
     * @example
     * // Get one Audit_logs
     * const audit_logs = await prisma.audit_logs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends Audit_logsFindUniqueArgs>(args: SelectSubset<T, Audit_logsFindUniqueArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Audit_logs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {Audit_logsFindUniqueOrThrowArgs} args - Arguments to find a Audit_logs
     * @example
     * // Get one Audit_logs
     * const audit_logs = await prisma.audit_logs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends Audit_logsFindUniqueOrThrowArgs>(args: SelectSubset<T, Audit_logsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Audit_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsFindFirstArgs} args - Arguments to find a Audit_logs
     * @example
     * // Get one Audit_logs
     * const audit_logs = await prisma.audit_logs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends Audit_logsFindFirstArgs>(args?: SelectSubset<T, Audit_logsFindFirstArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Audit_logs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsFindFirstOrThrowArgs} args - Arguments to find a Audit_logs
     * @example
     * // Get one Audit_logs
     * const audit_logs = await prisma.audit_logs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends Audit_logsFindFirstOrThrowArgs>(args?: SelectSubset<T, Audit_logsFindFirstOrThrowArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Audit_logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Audit_logs
     * const audit_logs = await prisma.audit_logs.findMany()
     * 
     * // Get first 10 Audit_logs
     * const audit_logs = await prisma.audit_logs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const audit_logsWithIdOnly = await prisma.audit_logs.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends Audit_logsFindManyArgs>(args?: SelectSubset<T, Audit_logsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Audit_logs.
     * @param {Audit_logsCreateArgs} args - Arguments to create a Audit_logs.
     * @example
     * // Create one Audit_logs
     * const Audit_logs = await prisma.audit_logs.create({
     *   data: {
     *     // ... data to create a Audit_logs
     *   }
     * })
     * 
     */
    create<T extends Audit_logsCreateArgs>(args: SelectSubset<T, Audit_logsCreateArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Audit_logs.
     * @param {Audit_logsCreateManyArgs} args - Arguments to create many Audit_logs.
     * @example
     * // Create many Audit_logs
     * const audit_logs = await prisma.audit_logs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends Audit_logsCreateManyArgs>(args?: SelectSubset<T, Audit_logsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Audit_logs.
     * @param {Audit_logsDeleteArgs} args - Arguments to delete one Audit_logs.
     * @example
     * // Delete one Audit_logs
     * const Audit_logs = await prisma.audit_logs.delete({
     *   where: {
     *     // ... filter to delete one Audit_logs
     *   }
     * })
     * 
     */
    delete<T extends Audit_logsDeleteArgs>(args: SelectSubset<T, Audit_logsDeleteArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Audit_logs.
     * @param {Audit_logsUpdateArgs} args - Arguments to update one Audit_logs.
     * @example
     * // Update one Audit_logs
     * const audit_logs = await prisma.audit_logs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends Audit_logsUpdateArgs>(args: SelectSubset<T, Audit_logsUpdateArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Audit_logs.
     * @param {Audit_logsDeleteManyArgs} args - Arguments to filter Audit_logs to delete.
     * @example
     * // Delete a few Audit_logs
     * const { count } = await prisma.audit_logs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends Audit_logsDeleteManyArgs>(args?: SelectSubset<T, Audit_logsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Audit_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Audit_logs
     * const audit_logs = await prisma.audit_logs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends Audit_logsUpdateManyArgs>(args: SelectSubset<T, Audit_logsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Audit_logs.
     * @param {Audit_logsUpsertArgs} args - Arguments to update or create a Audit_logs.
     * @example
     * // Update or create a Audit_logs
     * const audit_logs = await prisma.audit_logs.upsert({
     *   create: {
     *     // ... data to create a Audit_logs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Audit_logs we want to update
     *   }
     * })
     */
    upsert<T extends Audit_logsUpsertArgs>(args: SelectSubset<T, Audit_logsUpsertArgs<ExtArgs>>): Prisma__Audit_logsClient<$Result.GetResult<Prisma.$Audit_logsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Audit_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsCountArgs} args - Arguments to filter Audit_logs to count.
     * @example
     * // Count the number of Audit_logs
     * const count = await prisma.audit_logs.count({
     *   where: {
     *     // ... the filter for the Audit_logs we want to count
     *   }
     * })
    **/
    count<T extends Audit_logsCountArgs>(
      args?: Subset<T, Audit_logsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Audit_logsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Audit_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Audit_logsAggregateArgs>(args: Subset<T, Audit_logsAggregateArgs>): Prisma.PrismaPromise<GetAudit_logsAggregateType<T>>

    /**
     * Group by Audit_logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Audit_logsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Audit_logsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Audit_logsGroupByArgs['orderBy'] }
        : { orderBy?: Audit_logsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Audit_logsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAudit_logsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Audit_logs model
   */
  readonly fields: Audit_logsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Audit_logs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__Audit_logsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends Audit_logs$userArgs<ExtArgs> = {}>(args?: Subset<T, Audit_logs$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Audit_logs model
   */
  interface Audit_logsFieldRefs {
    readonly id: FieldRef<"Audit_logs", 'String'>
    readonly user_id: FieldRef<"Audit_logs", 'String'>
    readonly method: FieldRef<"Audit_logs", 'String'>
    readonly url: FieldRef<"Audit_logs", 'String'>
    readonly ip: FieldRef<"Audit_logs", 'String'>
    readonly status_code: FieldRef<"Audit_logs", 'Int'>
    readonly duration_ms: FieldRef<"Audit_logs", 'Int'>
    readonly params: FieldRef<"Audit_logs", 'String'>
    readonly query: FieldRef<"Audit_logs", 'String'>
    readonly body: FieldRef<"Audit_logs", 'String'>
    readonly timestamp: FieldRef<"Audit_logs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Audit_logs findUnique
   */
  export type Audit_logsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter, which Audit_logs to fetch.
     */
    where: Audit_logsWhereUniqueInput
  }

  /**
   * Audit_logs findUniqueOrThrow
   */
  export type Audit_logsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter, which Audit_logs to fetch.
     */
    where: Audit_logsWhereUniqueInput
  }

  /**
   * Audit_logs findFirst
   */
  export type Audit_logsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter, which Audit_logs to fetch.
     */
    where?: Audit_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audit_logs to fetch.
     */
    orderBy?: Audit_logsOrderByWithRelationInput | Audit_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audit_logs.
     */
    cursor?: Audit_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audit_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audit_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audit_logs.
     */
    distinct?: Audit_logsScalarFieldEnum | Audit_logsScalarFieldEnum[]
  }

  /**
   * Audit_logs findFirstOrThrow
   */
  export type Audit_logsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter, which Audit_logs to fetch.
     */
    where?: Audit_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audit_logs to fetch.
     */
    orderBy?: Audit_logsOrderByWithRelationInput | Audit_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Audit_logs.
     */
    cursor?: Audit_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audit_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audit_logs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Audit_logs.
     */
    distinct?: Audit_logsScalarFieldEnum | Audit_logsScalarFieldEnum[]
  }

  /**
   * Audit_logs findMany
   */
  export type Audit_logsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter, which Audit_logs to fetch.
     */
    where?: Audit_logsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Audit_logs to fetch.
     */
    orderBy?: Audit_logsOrderByWithRelationInput | Audit_logsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Audit_logs.
     */
    cursor?: Audit_logsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Audit_logs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Audit_logs.
     */
    skip?: number
    distinct?: Audit_logsScalarFieldEnum | Audit_logsScalarFieldEnum[]
  }

  /**
   * Audit_logs create
   */
  export type Audit_logsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * The data needed to create a Audit_logs.
     */
    data: XOR<Audit_logsCreateInput, Audit_logsUncheckedCreateInput>
  }

  /**
   * Audit_logs createMany
   */
  export type Audit_logsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Audit_logs.
     */
    data: Audit_logsCreateManyInput | Audit_logsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Audit_logs update
   */
  export type Audit_logsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * The data needed to update a Audit_logs.
     */
    data: XOR<Audit_logsUpdateInput, Audit_logsUncheckedUpdateInput>
    /**
     * Choose, which Audit_logs to update.
     */
    where: Audit_logsWhereUniqueInput
  }

  /**
   * Audit_logs updateMany
   */
  export type Audit_logsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Audit_logs.
     */
    data: XOR<Audit_logsUpdateManyMutationInput, Audit_logsUncheckedUpdateManyInput>
    /**
     * Filter which Audit_logs to update
     */
    where?: Audit_logsWhereInput
    /**
     * Limit how many Audit_logs to update.
     */
    limit?: number
  }

  /**
   * Audit_logs upsert
   */
  export type Audit_logsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * The filter to search for the Audit_logs to update in case it exists.
     */
    where: Audit_logsWhereUniqueInput
    /**
     * In case the Audit_logs found by the `where` argument doesn't exist, create a new Audit_logs with this data.
     */
    create: XOR<Audit_logsCreateInput, Audit_logsUncheckedCreateInput>
    /**
     * In case the Audit_logs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<Audit_logsUpdateInput, Audit_logsUncheckedUpdateInput>
  }

  /**
   * Audit_logs delete
   */
  export type Audit_logsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
    /**
     * Filter which Audit_logs to delete.
     */
    where: Audit_logsWhereUniqueInput
  }

  /**
   * Audit_logs deleteMany
   */
  export type Audit_logsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Audit_logs to delete
     */
    where?: Audit_logsWhereInput
    /**
     * Limit how many Audit_logs to delete.
     */
    limit?: number
  }

  /**
   * Audit_logs.user
   */
  export type Audit_logs$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Audit_logs without action
   */
  export type Audit_logsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Audit_logs
     */
    select?: Audit_logsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Audit_logs
     */
    omit?: Audit_logsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: Audit_logsInclude<ExtArgs> | null
  }


  /**
   * Model System
   */

  export type AggregateSystem = {
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  export type SystemAvgAggregateOutputType = {
    check_interval: number | null
    timeout: number | null
  }

  export type SystemSumAggregateOutputType = {
    check_interval: number | null
    timeout: number | null
  }

  export type SystemMinAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    monitor_type: $Enums.MonitorType | null
    check_interval: number | null
    timeout: number | null
    status: $Enums.SystemStatus | null
    is_enabled: boolean | null
    alert_email: string | null
    description: string | null
    created_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SystemMaxAggregateOutputType = {
    id: string | null
    name: string | null
    url: string | null
    monitor_type: $Enums.MonitorType | null
    check_interval: number | null
    timeout: number | null
    status: $Enums.SystemStatus | null
    is_enabled: boolean | null
    alert_email: string | null
    description: string | null
    created_by: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SystemCountAggregateOutputType = {
    id: number
    name: number
    url: number
    monitor_type: number
    check_interval: number
    timeout: number
    status: number
    is_enabled: number
    alert_email: number
    description: number
    created_by: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SystemAvgAggregateInputType = {
    check_interval?: true
    timeout?: true
  }

  export type SystemSumAggregateInputType = {
    check_interval?: true
    timeout?: true
  }

  export type SystemMinAggregateInputType = {
    id?: true
    name?: true
    url?: true
    monitor_type?: true
    check_interval?: true
    timeout?: true
    status?: true
    is_enabled?: true
    alert_email?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SystemMaxAggregateInputType = {
    id?: true
    name?: true
    url?: true
    monitor_type?: true
    check_interval?: true
    timeout?: true
    status?: true
    is_enabled?: true
    alert_email?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
  }

  export type SystemCountAggregateInputType = {
    id?: true
    name?: true
    url?: true
    monitor_type?: true
    check_interval?: true
    timeout?: true
    status?: true
    is_enabled?: true
    alert_email?: true
    description?: true
    created_by?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SystemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which System to aggregate.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Systems
    **/
    _count?: true | SystemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMaxAggregateInputType
  }

  export type GetSystemAggregateType<T extends SystemAggregateArgs> = {
        [P in keyof T & keyof AggregateSystem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystem[P]>
      : GetScalarType<T[P], AggregateSystem[P]>
  }




  export type SystemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemWhereInput
    orderBy?: SystemOrderByWithAggregationInput | SystemOrderByWithAggregationInput[]
    by: SystemScalarFieldEnum[] | SystemScalarFieldEnum
    having?: SystemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemCountAggregateInputType | true
    _avg?: SystemAvgAggregateInputType
    _sum?: SystemSumAggregateInputType
    _min?: SystemMinAggregateInputType
    _max?: SystemMaxAggregateInputType
  }

  export type SystemGroupByOutputType = {
    id: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval: number
    timeout: number
    status: $Enums.SystemStatus
    is_enabled: boolean
    alert_email: string
    description: string
    created_by: string
    created_at: Date
    updated_at: Date
    _count: SystemCountAggregateOutputType | null
    _avg: SystemAvgAggregateOutputType | null
    _sum: SystemSumAggregateOutputType | null
    _min: SystemMinAggregateOutputType | null
    _max: SystemMaxAggregateOutputType | null
  }

  type GetSystemGroupByPayload<T extends SystemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemGroupByOutputType[P]>
            : GetScalarType<T[P], SystemGroupByOutputType[P]>
        }
      >
    >


  export type SystemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    url?: boolean
    monitor_type?: boolean
    check_interval?: boolean
    timeout?: boolean
    status?: boolean
    is_enabled?: boolean
    alert_email?: boolean
    description?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    status_logs?: boolean | System$status_logsArgs<ExtArgs>
    alerts?: boolean | System$alertsArgs<ExtArgs>
    sla_configs?: boolean | System$sla_configsArgs<ExtArgs>
    sla_reports?: boolean | System$sla_reportsArgs<ExtArgs>
    _count?: boolean | SystemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["system"]>



  export type SystemSelectScalar = {
    id?: boolean
    name?: boolean
    url?: boolean
    monitor_type?: boolean
    check_interval?: boolean
    timeout?: boolean
    status?: boolean
    is_enabled?: boolean
    alert_email?: boolean
    description?: boolean
    created_by?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SystemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "url" | "monitor_type" | "check_interval" | "timeout" | "status" | "is_enabled" | "alert_email" | "description" | "created_by" | "created_at" | "updated_at", ExtArgs["result"]["system"]>
  export type SystemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    status_logs?: boolean | System$status_logsArgs<ExtArgs>
    alerts?: boolean | System$alertsArgs<ExtArgs>
    sla_configs?: boolean | System$sla_configsArgs<ExtArgs>
    sla_reports?: boolean | System$sla_reportsArgs<ExtArgs>
    _count?: boolean | SystemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SystemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "System"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      status_logs: Prisma.$StatusLogPayload<ExtArgs>[]
      alerts: Prisma.$AlertPayload<ExtArgs>[]
      sla_configs: Prisma.$SlaConfigPayload<ExtArgs> | null
      sla_reports: Prisma.$SlaReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      url: string
      monitor_type: $Enums.MonitorType
      check_interval: number
      timeout: number
      status: $Enums.SystemStatus
      is_enabled: boolean
      alert_email: string
      description: string
      created_by: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["system"]>
    composites: {}
  }

  type SystemGetPayload<S extends boolean | null | undefined | SystemDefaultArgs> = $Result.GetResult<Prisma.$SystemPayload, S>

  type SystemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SystemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SystemCountAggregateInputType | true
    }

  export interface SystemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['System'], meta: { name: 'System' } }
    /**
     * Find zero or one System that matches the filter.
     * @param {SystemFindUniqueArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemFindUniqueArgs>(args: SelectSubset<T, SystemFindUniqueArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one System that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SystemFindUniqueOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemFindFirstArgs>(args?: SelectSubset<T, SystemFindFirstArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first System that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindFirstOrThrowArgs} args - Arguments to find a System
     * @example
     * // Get one System
     * const system = await prisma.system.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Systems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Systems
     * const systems = await prisma.system.findMany()
     * 
     * // Get first 10 Systems
     * const systems = await prisma.system.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemWithIdOnly = await prisma.system.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemFindManyArgs>(args?: SelectSubset<T, SystemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a System.
     * @param {SystemCreateArgs} args - Arguments to create a System.
     * @example
     * // Create one System
     * const System = await prisma.system.create({
     *   data: {
     *     // ... data to create a System
     *   }
     * })
     * 
     */
    create<T extends SystemCreateArgs>(args: SelectSubset<T, SystemCreateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Systems.
     * @param {SystemCreateManyArgs} args - Arguments to create many Systems.
     * @example
     * // Create many Systems
     * const system = await prisma.system.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemCreateManyArgs>(args?: SelectSubset<T, SystemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a System.
     * @param {SystemDeleteArgs} args - Arguments to delete one System.
     * @example
     * // Delete one System
     * const System = await prisma.system.delete({
     *   where: {
     *     // ... filter to delete one System
     *   }
     * })
     * 
     */
    delete<T extends SystemDeleteArgs>(args: SelectSubset<T, SystemDeleteArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one System.
     * @param {SystemUpdateArgs} args - Arguments to update one System.
     * @example
     * // Update one System
     * const system = await prisma.system.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemUpdateArgs>(args: SelectSubset<T, SystemUpdateArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Systems.
     * @param {SystemDeleteManyArgs} args - Arguments to filter Systems to delete.
     * @example
     * // Delete a few Systems
     * const { count } = await prisma.system.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemDeleteManyArgs>(args?: SelectSubset<T, SystemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Systems
     * const system = await prisma.system.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemUpdateManyArgs>(args: SelectSubset<T, SystemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one System.
     * @param {SystemUpsertArgs} args - Arguments to update or create a System.
     * @example
     * // Update or create a System
     * const system = await prisma.system.upsert({
     *   create: {
     *     // ... data to create a System
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the System we want to update
     *   }
     * })
     */
    upsert<T extends SystemUpsertArgs>(args: SelectSubset<T, SystemUpsertArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Systems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemCountArgs} args - Arguments to filter Systems to count.
     * @example
     * // Count the number of Systems
     * const count = await prisma.system.count({
     *   where: {
     *     // ... the filter for the Systems we want to count
     *   }
     * })
    **/
    count<T extends SystemCountArgs>(
      args?: Subset<T, SystemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemAggregateArgs>(args: Subset<T, SystemAggregateArgs>): Prisma.PrismaPromise<GetSystemAggregateType<T>>

    /**
     * Group by System.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemGroupByArgs['orderBy'] }
        : { orderBy?: SystemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the System model
   */
  readonly fields: SystemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for System.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    status_logs<T extends System$status_logsArgs<ExtArgs> = {}>(args?: Subset<T, System$status_logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    alerts<T extends System$alertsArgs<ExtArgs> = {}>(args?: Subset<T, System$alertsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sla_configs<T extends System$sla_configsArgs<ExtArgs> = {}>(args?: Subset<T, System$sla_configsArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    sla_reports<T extends System$sla_reportsArgs<ExtArgs> = {}>(args?: Subset<T, System$sla_reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the System model
   */
  interface SystemFieldRefs {
    readonly id: FieldRef<"System", 'String'>
    readonly name: FieldRef<"System", 'String'>
    readonly url: FieldRef<"System", 'String'>
    readonly monitor_type: FieldRef<"System", 'MonitorType'>
    readonly check_interval: FieldRef<"System", 'Int'>
    readonly timeout: FieldRef<"System", 'Int'>
    readonly status: FieldRef<"System", 'SystemStatus'>
    readonly is_enabled: FieldRef<"System", 'Boolean'>
    readonly alert_email: FieldRef<"System", 'String'>
    readonly description: FieldRef<"System", 'String'>
    readonly created_by: FieldRef<"System", 'String'>
    readonly created_at: FieldRef<"System", 'DateTime'>
    readonly updated_at: FieldRef<"System", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * System findUnique
   */
  export type SystemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findUniqueOrThrow
   */
  export type SystemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System findFirst
   */
  export type SystemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findFirstOrThrow
   */
  export type SystemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which System to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Systems.
     */
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System findMany
   */
  export type SystemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter, which Systems to fetch.
     */
    where?: SystemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Systems to fetch.
     */
    orderBy?: SystemOrderByWithRelationInput | SystemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Systems.
     */
    cursor?: SystemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Systems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Systems.
     */
    skip?: number
    distinct?: SystemScalarFieldEnum | SystemScalarFieldEnum[]
  }

  /**
   * System create
   */
  export type SystemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The data needed to create a System.
     */
    data: XOR<SystemCreateInput, SystemUncheckedCreateInput>
  }

  /**
   * System createMany
   */
  export type SystemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Systems.
     */
    data: SystemCreateManyInput | SystemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * System update
   */
  export type SystemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The data needed to update a System.
     */
    data: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
    /**
     * Choose, which System to update.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System updateMany
   */
  export type SystemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Systems.
     */
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyInput>
    /**
     * Filter which Systems to update
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to update.
     */
    limit?: number
  }

  /**
   * System upsert
   */
  export type SystemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * The filter to search for the System to update in case it exists.
     */
    where: SystemWhereUniqueInput
    /**
     * In case the System found by the `where` argument doesn't exist, create a new System with this data.
     */
    create: XOR<SystemCreateInput, SystemUncheckedCreateInput>
    /**
     * In case the System was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemUpdateInput, SystemUncheckedUpdateInput>
  }

  /**
   * System delete
   */
  export type SystemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
    /**
     * Filter which System to delete.
     */
    where: SystemWhereUniqueInput
  }

  /**
   * System deleteMany
   */
  export type SystemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Systems to delete
     */
    where?: SystemWhereInput
    /**
     * Limit how many Systems to delete.
     */
    limit?: number
  }

  /**
   * System.status_logs
   */
  export type System$status_logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    where?: StatusLogWhereInput
    orderBy?: StatusLogOrderByWithRelationInput | StatusLogOrderByWithRelationInput[]
    cursor?: StatusLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StatusLogScalarFieldEnum | StatusLogScalarFieldEnum[]
  }

  /**
   * System.alerts
   */
  export type System$alertsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    cursor?: AlertWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * System.sla_configs
   */
  export type System$sla_configsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    where?: SlaConfigWhereInput
  }

  /**
   * System.sla_reports
   */
  export type System$sla_reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    where?: SlaReportWhereInput
    orderBy?: SlaReportOrderByWithRelationInput | SlaReportOrderByWithRelationInput[]
    cursor?: SlaReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SlaReportScalarFieldEnum | SlaReportScalarFieldEnum[]
  }

  /**
   * System without action
   */
  export type SystemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the System
     */
    select?: SystemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the System
     */
    omit?: SystemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SystemInclude<ExtArgs> | null
  }


  /**
   * Model StatusLog
   */

  export type AggregateStatusLog = {
    _count: StatusLogCountAggregateOutputType | null
    _avg: StatusLogAvgAggregateOutputType | null
    _sum: StatusLogSumAggregateOutputType | null
    _min: StatusLogMinAggregateOutputType | null
    _max: StatusLogMaxAggregateOutputType | null
  }

  export type StatusLogAvgAggregateOutputType = {
    response_time: number | null
    status_code: number | null
  }

  export type StatusLogSumAggregateOutputType = {
    response_time: number | null
    status_code: number | null
  }

  export type StatusLogMinAggregateOutputType = {
    id: string | null
    system_id: string | null
    status: $Enums.SystemStatus | null
    response_time: number | null
    status_code: number | null
    error_message: string | null
    checked_at: Date | null
  }

  export type StatusLogMaxAggregateOutputType = {
    id: string | null
    system_id: string | null
    status: $Enums.SystemStatus | null
    response_time: number | null
    status_code: number | null
    error_message: string | null
    checked_at: Date | null
  }

  export type StatusLogCountAggregateOutputType = {
    id: number
    system_id: number
    status: number
    response_time: number
    status_code: number
    error_message: number
    checked_at: number
    _all: number
  }


  export type StatusLogAvgAggregateInputType = {
    response_time?: true
    status_code?: true
  }

  export type StatusLogSumAggregateInputType = {
    response_time?: true
    status_code?: true
  }

  export type StatusLogMinAggregateInputType = {
    id?: true
    system_id?: true
    status?: true
    response_time?: true
    status_code?: true
    error_message?: true
    checked_at?: true
  }

  export type StatusLogMaxAggregateInputType = {
    id?: true
    system_id?: true
    status?: true
    response_time?: true
    status_code?: true
    error_message?: true
    checked_at?: true
  }

  export type StatusLogCountAggregateInputType = {
    id?: true
    system_id?: true
    status?: true
    response_time?: true
    status_code?: true
    error_message?: true
    checked_at?: true
    _all?: true
  }

  export type StatusLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusLog to aggregate.
     */
    where?: StatusLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusLogs to fetch.
     */
    orderBy?: StatusLogOrderByWithRelationInput | StatusLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StatusLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StatusLogs
    **/
    _count?: true | StatusLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StatusLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StatusLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StatusLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StatusLogMaxAggregateInputType
  }

  export type GetStatusLogAggregateType<T extends StatusLogAggregateArgs> = {
        [P in keyof T & keyof AggregateStatusLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStatusLog[P]>
      : GetScalarType<T[P], AggregateStatusLog[P]>
  }




  export type StatusLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StatusLogWhereInput
    orderBy?: StatusLogOrderByWithAggregationInput | StatusLogOrderByWithAggregationInput[]
    by: StatusLogScalarFieldEnum[] | StatusLogScalarFieldEnum
    having?: StatusLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StatusLogCountAggregateInputType | true
    _avg?: StatusLogAvgAggregateInputType
    _sum?: StatusLogSumAggregateInputType
    _min?: StatusLogMinAggregateInputType
    _max?: StatusLogMaxAggregateInputType
  }

  export type StatusLogGroupByOutputType = {
    id: string
    system_id: string
    status: $Enums.SystemStatus
    response_time: number | null
    status_code: number | null
    error_message: string | null
    checked_at: Date
    _count: StatusLogCountAggregateOutputType | null
    _avg: StatusLogAvgAggregateOutputType | null
    _sum: StatusLogSumAggregateOutputType | null
    _min: StatusLogMinAggregateOutputType | null
    _max: StatusLogMaxAggregateOutputType | null
  }

  type GetStatusLogGroupByPayload<T extends StatusLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StatusLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StatusLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StatusLogGroupByOutputType[P]>
            : GetScalarType<T[P], StatusLogGroupByOutputType[P]>
        }
      >
    >


  export type StatusLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    system_id?: boolean
    status?: boolean
    response_time?: boolean
    status_code?: boolean
    error_message?: boolean
    checked_at?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["statusLog"]>



  export type StatusLogSelectScalar = {
    id?: boolean
    system_id?: boolean
    status?: boolean
    response_time?: boolean
    status_code?: boolean
    error_message?: boolean
    checked_at?: boolean
  }

  export type StatusLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "system_id" | "status" | "response_time" | "status_code" | "error_message" | "checked_at", ExtArgs["result"]["statusLog"]>
  export type StatusLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }

  export type $StatusLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StatusLog"
    objects: {
      system: Prisma.$SystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      system_id: string
      status: $Enums.SystemStatus
      response_time: number | null
      status_code: number | null
      error_message: string | null
      checked_at: Date
    }, ExtArgs["result"]["statusLog"]>
    composites: {}
  }

  type StatusLogGetPayload<S extends boolean | null | undefined | StatusLogDefaultArgs> = $Result.GetResult<Prisma.$StatusLogPayload, S>

  type StatusLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StatusLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StatusLogCountAggregateInputType | true
    }

  export interface StatusLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StatusLog'], meta: { name: 'StatusLog' } }
    /**
     * Find zero or one StatusLog that matches the filter.
     * @param {StatusLogFindUniqueArgs} args - Arguments to find a StatusLog
     * @example
     * // Get one StatusLog
     * const statusLog = await prisma.statusLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StatusLogFindUniqueArgs>(args: SelectSubset<T, StatusLogFindUniqueArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StatusLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StatusLogFindUniqueOrThrowArgs} args - Arguments to find a StatusLog
     * @example
     * // Get one StatusLog
     * const statusLog = await prisma.statusLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StatusLogFindUniqueOrThrowArgs>(args: SelectSubset<T, StatusLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogFindFirstArgs} args - Arguments to find a StatusLog
     * @example
     * // Get one StatusLog
     * const statusLog = await prisma.statusLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StatusLogFindFirstArgs>(args?: SelectSubset<T, StatusLogFindFirstArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StatusLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogFindFirstOrThrowArgs} args - Arguments to find a StatusLog
     * @example
     * // Get one StatusLog
     * const statusLog = await prisma.statusLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StatusLogFindFirstOrThrowArgs>(args?: SelectSubset<T, StatusLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StatusLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StatusLogs
     * const statusLogs = await prisma.statusLog.findMany()
     * 
     * // Get first 10 StatusLogs
     * const statusLogs = await prisma.statusLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const statusLogWithIdOnly = await prisma.statusLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StatusLogFindManyArgs>(args?: SelectSubset<T, StatusLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StatusLog.
     * @param {StatusLogCreateArgs} args - Arguments to create a StatusLog.
     * @example
     * // Create one StatusLog
     * const StatusLog = await prisma.statusLog.create({
     *   data: {
     *     // ... data to create a StatusLog
     *   }
     * })
     * 
     */
    create<T extends StatusLogCreateArgs>(args: SelectSubset<T, StatusLogCreateArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StatusLogs.
     * @param {StatusLogCreateManyArgs} args - Arguments to create many StatusLogs.
     * @example
     * // Create many StatusLogs
     * const statusLog = await prisma.statusLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StatusLogCreateManyArgs>(args?: SelectSubset<T, StatusLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a StatusLog.
     * @param {StatusLogDeleteArgs} args - Arguments to delete one StatusLog.
     * @example
     * // Delete one StatusLog
     * const StatusLog = await prisma.statusLog.delete({
     *   where: {
     *     // ... filter to delete one StatusLog
     *   }
     * })
     * 
     */
    delete<T extends StatusLogDeleteArgs>(args: SelectSubset<T, StatusLogDeleteArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StatusLog.
     * @param {StatusLogUpdateArgs} args - Arguments to update one StatusLog.
     * @example
     * // Update one StatusLog
     * const statusLog = await prisma.statusLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StatusLogUpdateArgs>(args: SelectSubset<T, StatusLogUpdateArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StatusLogs.
     * @param {StatusLogDeleteManyArgs} args - Arguments to filter StatusLogs to delete.
     * @example
     * // Delete a few StatusLogs
     * const { count } = await prisma.statusLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StatusLogDeleteManyArgs>(args?: SelectSubset<T, StatusLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StatusLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StatusLogs
     * const statusLog = await prisma.statusLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StatusLogUpdateManyArgs>(args: SelectSubset<T, StatusLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StatusLog.
     * @param {StatusLogUpsertArgs} args - Arguments to update or create a StatusLog.
     * @example
     * // Update or create a StatusLog
     * const statusLog = await prisma.statusLog.upsert({
     *   create: {
     *     // ... data to create a StatusLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StatusLog we want to update
     *   }
     * })
     */
    upsert<T extends StatusLogUpsertArgs>(args: SelectSubset<T, StatusLogUpsertArgs<ExtArgs>>): Prisma__StatusLogClient<$Result.GetResult<Prisma.$StatusLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StatusLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogCountArgs} args - Arguments to filter StatusLogs to count.
     * @example
     * // Count the number of StatusLogs
     * const count = await prisma.statusLog.count({
     *   where: {
     *     // ... the filter for the StatusLogs we want to count
     *   }
     * })
    **/
    count<T extends StatusLogCountArgs>(
      args?: Subset<T, StatusLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StatusLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StatusLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StatusLogAggregateArgs>(args: Subset<T, StatusLogAggregateArgs>): Prisma.PrismaPromise<GetStatusLogAggregateType<T>>

    /**
     * Group by StatusLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StatusLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StatusLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StatusLogGroupByArgs['orderBy'] }
        : { orderBy?: StatusLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StatusLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStatusLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StatusLog model
   */
  readonly fields: StatusLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StatusLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StatusLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    system<T extends SystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SystemDefaultArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StatusLog model
   */
  interface StatusLogFieldRefs {
    readonly id: FieldRef<"StatusLog", 'String'>
    readonly system_id: FieldRef<"StatusLog", 'String'>
    readonly status: FieldRef<"StatusLog", 'SystemStatus'>
    readonly response_time: FieldRef<"StatusLog", 'Int'>
    readonly status_code: FieldRef<"StatusLog", 'Int'>
    readonly error_message: FieldRef<"StatusLog", 'String'>
    readonly checked_at: FieldRef<"StatusLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * StatusLog findUnique
   */
  export type StatusLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter, which StatusLog to fetch.
     */
    where: StatusLogWhereUniqueInput
  }

  /**
   * StatusLog findUniqueOrThrow
   */
  export type StatusLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter, which StatusLog to fetch.
     */
    where: StatusLogWhereUniqueInput
  }

  /**
   * StatusLog findFirst
   */
  export type StatusLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter, which StatusLog to fetch.
     */
    where?: StatusLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusLogs to fetch.
     */
    orderBy?: StatusLogOrderByWithRelationInput | StatusLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusLogs.
     */
    cursor?: StatusLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusLogs.
     */
    distinct?: StatusLogScalarFieldEnum | StatusLogScalarFieldEnum[]
  }

  /**
   * StatusLog findFirstOrThrow
   */
  export type StatusLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter, which StatusLog to fetch.
     */
    where?: StatusLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusLogs to fetch.
     */
    orderBy?: StatusLogOrderByWithRelationInput | StatusLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StatusLogs.
     */
    cursor?: StatusLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StatusLogs.
     */
    distinct?: StatusLogScalarFieldEnum | StatusLogScalarFieldEnum[]
  }

  /**
   * StatusLog findMany
   */
  export type StatusLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter, which StatusLogs to fetch.
     */
    where?: StatusLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StatusLogs to fetch.
     */
    orderBy?: StatusLogOrderByWithRelationInput | StatusLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StatusLogs.
     */
    cursor?: StatusLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StatusLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StatusLogs.
     */
    skip?: number
    distinct?: StatusLogScalarFieldEnum | StatusLogScalarFieldEnum[]
  }

  /**
   * StatusLog create
   */
  export type StatusLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * The data needed to create a StatusLog.
     */
    data: XOR<StatusLogCreateInput, StatusLogUncheckedCreateInput>
  }

  /**
   * StatusLog createMany
   */
  export type StatusLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StatusLogs.
     */
    data: StatusLogCreateManyInput | StatusLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StatusLog update
   */
  export type StatusLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * The data needed to update a StatusLog.
     */
    data: XOR<StatusLogUpdateInput, StatusLogUncheckedUpdateInput>
    /**
     * Choose, which StatusLog to update.
     */
    where: StatusLogWhereUniqueInput
  }

  /**
   * StatusLog updateMany
   */
  export type StatusLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StatusLogs.
     */
    data: XOR<StatusLogUpdateManyMutationInput, StatusLogUncheckedUpdateManyInput>
    /**
     * Filter which StatusLogs to update
     */
    where?: StatusLogWhereInput
    /**
     * Limit how many StatusLogs to update.
     */
    limit?: number
  }

  /**
   * StatusLog upsert
   */
  export type StatusLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * The filter to search for the StatusLog to update in case it exists.
     */
    where: StatusLogWhereUniqueInput
    /**
     * In case the StatusLog found by the `where` argument doesn't exist, create a new StatusLog with this data.
     */
    create: XOR<StatusLogCreateInput, StatusLogUncheckedCreateInput>
    /**
     * In case the StatusLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StatusLogUpdateInput, StatusLogUncheckedUpdateInput>
  }

  /**
   * StatusLog delete
   */
  export type StatusLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
    /**
     * Filter which StatusLog to delete.
     */
    where: StatusLogWhereUniqueInput
  }

  /**
   * StatusLog deleteMany
   */
  export type StatusLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StatusLogs to delete
     */
    where?: StatusLogWhereInput
    /**
     * Limit how many StatusLogs to delete.
     */
    limit?: number
  }

  /**
   * StatusLog without action
   */
  export type StatusLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StatusLog
     */
    select?: StatusLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StatusLog
     */
    omit?: StatusLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StatusLogInclude<ExtArgs> | null
  }


  /**
   * Model Alert
   */

  export type AggregateAlert = {
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  export type AlertMinAggregateOutputType = {
    id: string | null
    system_id: string | null
    severity: $Enums.AlertSeverity | null
    status: $Enums.AlertStatus | null
    title: string | null
    message: string | null
    acknowledged_by: string | null
    acknowledged_at: Date | null
    resolved_at: Date | null
    created_at: Date | null
  }

  export type AlertMaxAggregateOutputType = {
    id: string | null
    system_id: string | null
    severity: $Enums.AlertSeverity | null
    status: $Enums.AlertStatus | null
    title: string | null
    message: string | null
    acknowledged_by: string | null
    acknowledged_at: Date | null
    resolved_at: Date | null
    created_at: Date | null
  }

  export type AlertCountAggregateOutputType = {
    id: number
    system_id: number
    severity: number
    status: number
    title: number
    message: number
    acknowledged_by: number
    acknowledged_at: number
    resolved_at: number
    created_at: number
    _all: number
  }


  export type AlertMinAggregateInputType = {
    id?: true
    system_id?: true
    severity?: true
    status?: true
    title?: true
    message?: true
    acknowledged_by?: true
    acknowledged_at?: true
    resolved_at?: true
    created_at?: true
  }

  export type AlertMaxAggregateInputType = {
    id?: true
    system_id?: true
    severity?: true
    status?: true
    title?: true
    message?: true
    acknowledged_by?: true
    acknowledged_at?: true
    resolved_at?: true
    created_at?: true
  }

  export type AlertCountAggregateInputType = {
    id?: true
    system_id?: true
    severity?: true
    status?: true
    title?: true
    message?: true
    acknowledged_by?: true
    acknowledged_at?: true
    resolved_at?: true
    created_at?: true
    _all?: true
  }

  export type AlertAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alert to aggregate.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alerts
    **/
    _count?: true | AlertCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlertMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlertMaxAggregateInputType
  }

  export type GetAlertAggregateType<T extends AlertAggregateArgs> = {
        [P in keyof T & keyof AggregateAlert]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlert[P]>
      : GetScalarType<T[P], AggregateAlert[P]>
  }




  export type AlertGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlertWhereInput
    orderBy?: AlertOrderByWithAggregationInput | AlertOrderByWithAggregationInput[]
    by: AlertScalarFieldEnum[] | AlertScalarFieldEnum
    having?: AlertScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlertCountAggregateInputType | true
    _min?: AlertMinAggregateInputType
    _max?: AlertMaxAggregateInputType
  }

  export type AlertGroupByOutputType = {
    id: string
    system_id: string
    severity: $Enums.AlertSeverity
    status: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_by: string | null
    acknowledged_at: Date | null
    resolved_at: Date | null
    created_at: Date
    _count: AlertCountAggregateOutputType | null
    _min: AlertMinAggregateOutputType | null
    _max: AlertMaxAggregateOutputType | null
  }

  type GetAlertGroupByPayload<T extends AlertGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlertGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlertGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlertGroupByOutputType[P]>
            : GetScalarType<T[P], AlertGroupByOutputType[P]>
        }
      >
    >


  export type AlertSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    system_id?: boolean
    severity?: boolean
    status?: boolean
    title?: boolean
    message?: boolean
    acknowledged_by?: boolean
    acknowledged_at?: boolean
    resolved_at?: boolean
    created_at?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | Alert$acknowledgedByArgs<ExtArgs>
  }, ExtArgs["result"]["alert"]>



  export type AlertSelectScalar = {
    id?: boolean
    system_id?: boolean
    severity?: boolean
    status?: boolean
    title?: boolean
    message?: boolean
    acknowledged_by?: boolean
    acknowledged_at?: boolean
    resolved_at?: boolean
    created_at?: boolean
  }

  export type AlertOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "system_id" | "severity" | "status" | "title" | "message" | "acknowledged_by" | "acknowledged_at" | "resolved_at" | "created_at", ExtArgs["result"]["alert"]>
  export type AlertInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
    acknowledgedBy?: boolean | Alert$acknowledgedByArgs<ExtArgs>
  }

  export type $AlertPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alert"
    objects: {
      system: Prisma.$SystemPayload<ExtArgs>
      acknowledgedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      system_id: string
      severity: $Enums.AlertSeverity
      status: $Enums.AlertStatus
      title: string
      message: string
      acknowledged_by: string | null
      acknowledged_at: Date | null
      resolved_at: Date | null
      created_at: Date
    }, ExtArgs["result"]["alert"]>
    composites: {}
  }

  type AlertGetPayload<S extends boolean | null | undefined | AlertDefaultArgs> = $Result.GetResult<Prisma.$AlertPayload, S>

  type AlertCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlertFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlertCountAggregateInputType | true
    }

  export interface AlertDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alert'], meta: { name: 'Alert' } }
    /**
     * Find zero or one Alert that matches the filter.
     * @param {AlertFindUniqueArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlertFindUniqueArgs>(args: SelectSubset<T, AlertFindUniqueArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alert that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlertFindUniqueOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlertFindUniqueOrThrowArgs>(args: SelectSubset<T, AlertFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlertFindFirstArgs>(args?: SelectSubset<T, AlertFindFirstArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alert that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindFirstOrThrowArgs} args - Arguments to find a Alert
     * @example
     * // Get one Alert
     * const alert = await prisma.alert.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlertFindFirstOrThrowArgs>(args?: SelectSubset<T, AlertFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alerts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alerts
     * const alerts = await prisma.alert.findMany()
     * 
     * // Get first 10 Alerts
     * const alerts = await prisma.alert.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alertWithIdOnly = await prisma.alert.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlertFindManyArgs>(args?: SelectSubset<T, AlertFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alert.
     * @param {AlertCreateArgs} args - Arguments to create a Alert.
     * @example
     * // Create one Alert
     * const Alert = await prisma.alert.create({
     *   data: {
     *     // ... data to create a Alert
     *   }
     * })
     * 
     */
    create<T extends AlertCreateArgs>(args: SelectSubset<T, AlertCreateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alerts.
     * @param {AlertCreateManyArgs} args - Arguments to create many Alerts.
     * @example
     * // Create many Alerts
     * const alert = await prisma.alert.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlertCreateManyArgs>(args?: SelectSubset<T, AlertCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Alert.
     * @param {AlertDeleteArgs} args - Arguments to delete one Alert.
     * @example
     * // Delete one Alert
     * const Alert = await prisma.alert.delete({
     *   where: {
     *     // ... filter to delete one Alert
     *   }
     * })
     * 
     */
    delete<T extends AlertDeleteArgs>(args: SelectSubset<T, AlertDeleteArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alert.
     * @param {AlertUpdateArgs} args - Arguments to update one Alert.
     * @example
     * // Update one Alert
     * const alert = await prisma.alert.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlertUpdateArgs>(args: SelectSubset<T, AlertUpdateArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alerts.
     * @param {AlertDeleteManyArgs} args - Arguments to filter Alerts to delete.
     * @example
     * // Delete a few Alerts
     * const { count } = await prisma.alert.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlertDeleteManyArgs>(args?: SelectSubset<T, AlertDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alerts
     * const alert = await prisma.alert.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlertUpdateManyArgs>(args: SelectSubset<T, AlertUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Alert.
     * @param {AlertUpsertArgs} args - Arguments to update or create a Alert.
     * @example
     * // Update or create a Alert
     * const alert = await prisma.alert.upsert({
     *   create: {
     *     // ... data to create a Alert
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alert we want to update
     *   }
     * })
     */
    upsert<T extends AlertUpsertArgs>(args: SelectSubset<T, AlertUpsertArgs<ExtArgs>>): Prisma__AlertClient<$Result.GetResult<Prisma.$AlertPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alerts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertCountArgs} args - Arguments to filter Alerts to count.
     * @example
     * // Count the number of Alerts
     * const count = await prisma.alert.count({
     *   where: {
     *     // ... the filter for the Alerts we want to count
     *   }
     * })
    **/
    count<T extends AlertCountArgs>(
      args?: Subset<T, AlertCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlertCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlertAggregateArgs>(args: Subset<T, AlertAggregateArgs>): Prisma.PrismaPromise<GetAlertAggregateType<T>>

    /**
     * Group by Alert.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlertGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlertGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlertGroupByArgs['orderBy'] }
        : { orderBy?: AlertGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlertGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlertGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alert model
   */
  readonly fields: AlertFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alert.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlertClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    system<T extends SystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SystemDefaultArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    acknowledgedBy<T extends Alert$acknowledgedByArgs<ExtArgs> = {}>(args?: Subset<T, Alert$acknowledgedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alert model
   */
  interface AlertFieldRefs {
    readonly id: FieldRef<"Alert", 'String'>
    readonly system_id: FieldRef<"Alert", 'String'>
    readonly severity: FieldRef<"Alert", 'AlertSeverity'>
    readonly status: FieldRef<"Alert", 'AlertStatus'>
    readonly title: FieldRef<"Alert", 'String'>
    readonly message: FieldRef<"Alert", 'String'>
    readonly acknowledged_by: FieldRef<"Alert", 'String'>
    readonly acknowledged_at: FieldRef<"Alert", 'DateTime'>
    readonly resolved_at: FieldRef<"Alert", 'DateTime'>
    readonly created_at: FieldRef<"Alert", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Alert findUnique
   */
  export type AlertFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findUniqueOrThrow
   */
  export type AlertFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert findFirst
   */
  export type AlertFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findFirstOrThrow
   */
  export type AlertFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alert to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alerts.
     */
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert findMany
   */
  export type AlertFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter, which Alerts to fetch.
     */
    where?: AlertWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alerts to fetch.
     */
    orderBy?: AlertOrderByWithRelationInput | AlertOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alerts.
     */
    cursor?: AlertWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alerts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alerts.
     */
    skip?: number
    distinct?: AlertScalarFieldEnum | AlertScalarFieldEnum[]
  }

  /**
   * Alert create
   */
  export type AlertCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to create a Alert.
     */
    data: XOR<AlertCreateInput, AlertUncheckedCreateInput>
  }

  /**
   * Alert createMany
   */
  export type AlertCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alerts.
     */
    data: AlertCreateManyInput | AlertCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alert update
   */
  export type AlertUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The data needed to update a Alert.
     */
    data: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
    /**
     * Choose, which Alert to update.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert updateMany
   */
  export type AlertUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alerts.
     */
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyInput>
    /**
     * Filter which Alerts to update
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to update.
     */
    limit?: number
  }

  /**
   * Alert upsert
   */
  export type AlertUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * The filter to search for the Alert to update in case it exists.
     */
    where: AlertWhereUniqueInput
    /**
     * In case the Alert found by the `where` argument doesn't exist, create a new Alert with this data.
     */
    create: XOR<AlertCreateInput, AlertUncheckedCreateInput>
    /**
     * In case the Alert was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlertUpdateInput, AlertUncheckedUpdateInput>
  }

  /**
   * Alert delete
   */
  export type AlertDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
    /**
     * Filter which Alert to delete.
     */
    where: AlertWhereUniqueInput
  }

  /**
   * Alert deleteMany
   */
  export type AlertDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alerts to delete
     */
    where?: AlertWhereInput
    /**
     * Limit how many Alerts to delete.
     */
    limit?: number
  }

  /**
   * Alert.acknowledgedBy
   */
  export type Alert$acknowledgedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Alert without action
   */
  export type AlertDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alert
     */
    select?: AlertSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alert
     */
    omit?: AlertOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlertInclude<ExtArgs> | null
  }


  /**
   * Model SlaConfig
   */

  export type AggregateSlaConfig = {
    _count: SlaConfigCountAggregateOutputType | null
    _avg: SlaConfigAvgAggregateOutputType | null
    _sum: SlaConfigSumAggregateOutputType | null
    _min: SlaConfigMinAggregateOutputType | null
    _max: SlaConfigMaxAggregateOutputType | null
  }

  export type SlaConfigAvgAggregateOutputType = {
    uptime_target: number | null
    response_time_target: number | null
    alert_threshold_minutes: number | null
  }

  export type SlaConfigSumAggregateOutputType = {
    uptime_target: number | null
    response_time_target: number | null
    alert_threshold_minutes: number | null
  }

  export type SlaConfigMinAggregateOutputType = {
    id: string | null
    system_id: string | null
    uptime_target: number | null
    response_time_target: number | null
    alert_on_sla_violation: boolean | null
    alert_threshold_minutes: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SlaConfigMaxAggregateOutputType = {
    id: string | null
    system_id: string | null
    uptime_target: number | null
    response_time_target: number | null
    alert_on_sla_violation: boolean | null
    alert_threshold_minutes: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type SlaConfigCountAggregateOutputType = {
    id: number
    system_id: number
    uptime_target: number
    response_time_target: number
    alert_on_sla_violation: number
    alert_threshold_minutes: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type SlaConfigAvgAggregateInputType = {
    uptime_target?: true
    response_time_target?: true
    alert_threshold_minutes?: true
  }

  export type SlaConfigSumAggregateInputType = {
    uptime_target?: true
    response_time_target?: true
    alert_threshold_minutes?: true
  }

  export type SlaConfigMinAggregateInputType = {
    id?: true
    system_id?: true
    uptime_target?: true
    response_time_target?: true
    alert_on_sla_violation?: true
    alert_threshold_minutes?: true
    created_at?: true
    updated_at?: true
  }

  export type SlaConfigMaxAggregateInputType = {
    id?: true
    system_id?: true
    uptime_target?: true
    response_time_target?: true
    alert_on_sla_violation?: true
    alert_threshold_minutes?: true
    created_at?: true
    updated_at?: true
  }

  export type SlaConfigCountAggregateInputType = {
    id?: true
    system_id?: true
    uptime_target?: true
    response_time_target?: true
    alert_on_sla_violation?: true
    alert_threshold_minutes?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type SlaConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlaConfig to aggregate.
     */
    where?: SlaConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaConfigs to fetch.
     */
    orderBy?: SlaConfigOrderByWithRelationInput | SlaConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SlaConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SlaConfigs
    **/
    _count?: true | SlaConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SlaConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SlaConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlaConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlaConfigMaxAggregateInputType
  }

  export type GetSlaConfigAggregateType<T extends SlaConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateSlaConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlaConfig[P]>
      : GetScalarType<T[P], AggregateSlaConfig[P]>
  }




  export type SlaConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SlaConfigWhereInput
    orderBy?: SlaConfigOrderByWithAggregationInput | SlaConfigOrderByWithAggregationInput[]
    by: SlaConfigScalarFieldEnum[] | SlaConfigScalarFieldEnum
    having?: SlaConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlaConfigCountAggregateInputType | true
    _avg?: SlaConfigAvgAggregateInputType
    _sum?: SlaConfigSumAggregateInputType
    _min?: SlaConfigMinAggregateInputType
    _max?: SlaConfigMaxAggregateInputType
  }

  export type SlaConfigGroupByOutputType = {
    id: string
    system_id: string
    uptime_target: number
    response_time_target: number
    alert_on_sla_violation: boolean
    alert_threshold_minutes: number
    created_at: Date
    updated_at: Date
    _count: SlaConfigCountAggregateOutputType | null
    _avg: SlaConfigAvgAggregateOutputType | null
    _sum: SlaConfigSumAggregateOutputType | null
    _min: SlaConfigMinAggregateOutputType | null
    _max: SlaConfigMaxAggregateOutputType | null
  }

  type GetSlaConfigGroupByPayload<T extends SlaConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SlaConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlaConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlaConfigGroupByOutputType[P]>
            : GetScalarType<T[P], SlaConfigGroupByOutputType[P]>
        }
      >
    >


  export type SlaConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    system_id?: boolean
    uptime_target?: boolean
    response_time_target?: boolean
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: boolean
    created_at?: boolean
    updated_at?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["slaConfig"]>



  export type SlaConfigSelectScalar = {
    id?: boolean
    system_id?: boolean
    uptime_target?: boolean
    response_time_target?: boolean
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type SlaConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "system_id" | "uptime_target" | "response_time_target" | "alert_on_sla_violation" | "alert_threshold_minutes" | "created_at" | "updated_at", ExtArgs["result"]["slaConfig"]>
  export type SlaConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }

  export type $SlaConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SlaConfig"
    objects: {
      system: Prisma.$SystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      system_id: string
      uptime_target: number
      response_time_target: number
      alert_on_sla_violation: boolean
      alert_threshold_minutes: number
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["slaConfig"]>
    composites: {}
  }

  type SlaConfigGetPayload<S extends boolean | null | undefined | SlaConfigDefaultArgs> = $Result.GetResult<Prisma.$SlaConfigPayload, S>

  type SlaConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SlaConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SlaConfigCountAggregateInputType | true
    }

  export interface SlaConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SlaConfig'], meta: { name: 'SlaConfig' } }
    /**
     * Find zero or one SlaConfig that matches the filter.
     * @param {SlaConfigFindUniqueArgs} args - Arguments to find a SlaConfig
     * @example
     * // Get one SlaConfig
     * const slaConfig = await prisma.slaConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SlaConfigFindUniqueArgs>(args: SelectSubset<T, SlaConfigFindUniqueArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SlaConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SlaConfigFindUniqueOrThrowArgs} args - Arguments to find a SlaConfig
     * @example
     * // Get one SlaConfig
     * const slaConfig = await prisma.slaConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SlaConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, SlaConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SlaConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigFindFirstArgs} args - Arguments to find a SlaConfig
     * @example
     * // Get one SlaConfig
     * const slaConfig = await prisma.slaConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SlaConfigFindFirstArgs>(args?: SelectSubset<T, SlaConfigFindFirstArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SlaConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigFindFirstOrThrowArgs} args - Arguments to find a SlaConfig
     * @example
     * // Get one SlaConfig
     * const slaConfig = await prisma.slaConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SlaConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, SlaConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SlaConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SlaConfigs
     * const slaConfigs = await prisma.slaConfig.findMany()
     * 
     * // Get first 10 SlaConfigs
     * const slaConfigs = await prisma.slaConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slaConfigWithIdOnly = await prisma.slaConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SlaConfigFindManyArgs>(args?: SelectSubset<T, SlaConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SlaConfig.
     * @param {SlaConfigCreateArgs} args - Arguments to create a SlaConfig.
     * @example
     * // Create one SlaConfig
     * const SlaConfig = await prisma.slaConfig.create({
     *   data: {
     *     // ... data to create a SlaConfig
     *   }
     * })
     * 
     */
    create<T extends SlaConfigCreateArgs>(args: SelectSubset<T, SlaConfigCreateArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SlaConfigs.
     * @param {SlaConfigCreateManyArgs} args - Arguments to create many SlaConfigs.
     * @example
     * // Create many SlaConfigs
     * const slaConfig = await prisma.slaConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SlaConfigCreateManyArgs>(args?: SelectSubset<T, SlaConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SlaConfig.
     * @param {SlaConfigDeleteArgs} args - Arguments to delete one SlaConfig.
     * @example
     * // Delete one SlaConfig
     * const SlaConfig = await prisma.slaConfig.delete({
     *   where: {
     *     // ... filter to delete one SlaConfig
     *   }
     * })
     * 
     */
    delete<T extends SlaConfigDeleteArgs>(args: SelectSubset<T, SlaConfigDeleteArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SlaConfig.
     * @param {SlaConfigUpdateArgs} args - Arguments to update one SlaConfig.
     * @example
     * // Update one SlaConfig
     * const slaConfig = await prisma.slaConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SlaConfigUpdateArgs>(args: SelectSubset<T, SlaConfigUpdateArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SlaConfigs.
     * @param {SlaConfigDeleteManyArgs} args - Arguments to filter SlaConfigs to delete.
     * @example
     * // Delete a few SlaConfigs
     * const { count } = await prisma.slaConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SlaConfigDeleteManyArgs>(args?: SelectSubset<T, SlaConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SlaConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SlaConfigs
     * const slaConfig = await prisma.slaConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SlaConfigUpdateManyArgs>(args: SelectSubset<T, SlaConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SlaConfig.
     * @param {SlaConfigUpsertArgs} args - Arguments to update or create a SlaConfig.
     * @example
     * // Update or create a SlaConfig
     * const slaConfig = await prisma.slaConfig.upsert({
     *   create: {
     *     // ... data to create a SlaConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SlaConfig we want to update
     *   }
     * })
     */
    upsert<T extends SlaConfigUpsertArgs>(args: SelectSubset<T, SlaConfigUpsertArgs<ExtArgs>>): Prisma__SlaConfigClient<$Result.GetResult<Prisma.$SlaConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SlaConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigCountArgs} args - Arguments to filter SlaConfigs to count.
     * @example
     * // Count the number of SlaConfigs
     * const count = await prisma.slaConfig.count({
     *   where: {
     *     // ... the filter for the SlaConfigs we want to count
     *   }
     * })
    **/
    count<T extends SlaConfigCountArgs>(
      args?: Subset<T, SlaConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlaConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SlaConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlaConfigAggregateArgs>(args: Subset<T, SlaConfigAggregateArgs>): Prisma.PrismaPromise<GetSlaConfigAggregateType<T>>

    /**
     * Group by SlaConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SlaConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SlaConfigGroupByArgs['orderBy'] }
        : { orderBy?: SlaConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SlaConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlaConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SlaConfig model
   */
  readonly fields: SlaConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SlaConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SlaConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    system<T extends SystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SystemDefaultArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SlaConfig model
   */
  interface SlaConfigFieldRefs {
    readonly id: FieldRef<"SlaConfig", 'String'>
    readonly system_id: FieldRef<"SlaConfig", 'String'>
    readonly uptime_target: FieldRef<"SlaConfig", 'Float'>
    readonly response_time_target: FieldRef<"SlaConfig", 'Int'>
    readonly alert_on_sla_violation: FieldRef<"SlaConfig", 'Boolean'>
    readonly alert_threshold_minutes: FieldRef<"SlaConfig", 'Int'>
    readonly created_at: FieldRef<"SlaConfig", 'DateTime'>
    readonly updated_at: FieldRef<"SlaConfig", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SlaConfig findUnique
   */
  export type SlaConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter, which SlaConfig to fetch.
     */
    where: SlaConfigWhereUniqueInput
  }

  /**
   * SlaConfig findUniqueOrThrow
   */
  export type SlaConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter, which SlaConfig to fetch.
     */
    where: SlaConfigWhereUniqueInput
  }

  /**
   * SlaConfig findFirst
   */
  export type SlaConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter, which SlaConfig to fetch.
     */
    where?: SlaConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaConfigs to fetch.
     */
    orderBy?: SlaConfigOrderByWithRelationInput | SlaConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlaConfigs.
     */
    cursor?: SlaConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlaConfigs.
     */
    distinct?: SlaConfigScalarFieldEnum | SlaConfigScalarFieldEnum[]
  }

  /**
   * SlaConfig findFirstOrThrow
   */
  export type SlaConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter, which SlaConfig to fetch.
     */
    where?: SlaConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaConfigs to fetch.
     */
    orderBy?: SlaConfigOrderByWithRelationInput | SlaConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlaConfigs.
     */
    cursor?: SlaConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlaConfigs.
     */
    distinct?: SlaConfigScalarFieldEnum | SlaConfigScalarFieldEnum[]
  }

  /**
   * SlaConfig findMany
   */
  export type SlaConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter, which SlaConfigs to fetch.
     */
    where?: SlaConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaConfigs to fetch.
     */
    orderBy?: SlaConfigOrderByWithRelationInput | SlaConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SlaConfigs.
     */
    cursor?: SlaConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaConfigs.
     */
    skip?: number
    distinct?: SlaConfigScalarFieldEnum | SlaConfigScalarFieldEnum[]
  }

  /**
   * SlaConfig create
   */
  export type SlaConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a SlaConfig.
     */
    data: XOR<SlaConfigCreateInput, SlaConfigUncheckedCreateInput>
  }

  /**
   * SlaConfig createMany
   */
  export type SlaConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SlaConfigs.
     */
    data: SlaConfigCreateManyInput | SlaConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SlaConfig update
   */
  export type SlaConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a SlaConfig.
     */
    data: XOR<SlaConfigUpdateInput, SlaConfigUncheckedUpdateInput>
    /**
     * Choose, which SlaConfig to update.
     */
    where: SlaConfigWhereUniqueInput
  }

  /**
   * SlaConfig updateMany
   */
  export type SlaConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SlaConfigs.
     */
    data: XOR<SlaConfigUpdateManyMutationInput, SlaConfigUncheckedUpdateManyInput>
    /**
     * Filter which SlaConfigs to update
     */
    where?: SlaConfigWhereInput
    /**
     * Limit how many SlaConfigs to update.
     */
    limit?: number
  }

  /**
   * SlaConfig upsert
   */
  export type SlaConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the SlaConfig to update in case it exists.
     */
    where: SlaConfigWhereUniqueInput
    /**
     * In case the SlaConfig found by the `where` argument doesn't exist, create a new SlaConfig with this data.
     */
    create: XOR<SlaConfigCreateInput, SlaConfigUncheckedCreateInput>
    /**
     * In case the SlaConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SlaConfigUpdateInput, SlaConfigUncheckedUpdateInput>
  }

  /**
   * SlaConfig delete
   */
  export type SlaConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
    /**
     * Filter which SlaConfig to delete.
     */
    where: SlaConfigWhereUniqueInput
  }

  /**
   * SlaConfig deleteMany
   */
  export type SlaConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlaConfigs to delete
     */
    where?: SlaConfigWhereInput
    /**
     * Limit how many SlaConfigs to delete.
     */
    limit?: number
  }

  /**
   * SlaConfig without action
   */
  export type SlaConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaConfig
     */
    select?: SlaConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaConfig
     */
    omit?: SlaConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaConfigInclude<ExtArgs> | null
  }


  /**
   * Model SlaReport
   */

  export type AggregateSlaReport = {
    _count: SlaReportCountAggregateOutputType | null
    _avg: SlaReportAvgAggregateOutputType | null
    _sum: SlaReportSumAggregateOutputType | null
    _min: SlaReportMinAggregateOutputType | null
    _max: SlaReportMaxAggregateOutputType | null
  }

  export type SlaReportAvgAggregateOutputType = {
    month: number | null
    year: number | null
    total_checks: number | null
    successful_checks: number | null
    uptime_percentage: number | null
    average_response_time: number | null
    total_downtime: number | null
  }

  export type SlaReportSumAggregateOutputType = {
    month: number | null
    year: number | null
    total_checks: number | null
    successful_checks: number | null
    uptime_percentage: number | null
    average_response_time: number | null
    total_downtime: number | null
  }

  export type SlaReportMinAggregateOutputType = {
    id: string | null
    system_id: string | null
    month: number | null
    year: number | null
    total_checks: number | null
    successful_checks: number | null
    uptime_percentage: number | null
    average_response_time: number | null
    total_downtime: number | null
    created_at: Date | null
  }

  export type SlaReportMaxAggregateOutputType = {
    id: string | null
    system_id: string | null
    month: number | null
    year: number | null
    total_checks: number | null
    successful_checks: number | null
    uptime_percentage: number | null
    average_response_time: number | null
    total_downtime: number | null
    created_at: Date | null
  }

  export type SlaReportCountAggregateOutputType = {
    id: number
    system_id: number
    month: number
    year: number
    total_checks: number
    successful_checks: number
    uptime_percentage: number
    average_response_time: number
    total_downtime: number
    created_at: number
    _all: number
  }


  export type SlaReportAvgAggregateInputType = {
    month?: true
    year?: true
    total_checks?: true
    successful_checks?: true
    uptime_percentage?: true
    average_response_time?: true
    total_downtime?: true
  }

  export type SlaReportSumAggregateInputType = {
    month?: true
    year?: true
    total_checks?: true
    successful_checks?: true
    uptime_percentage?: true
    average_response_time?: true
    total_downtime?: true
  }

  export type SlaReportMinAggregateInputType = {
    id?: true
    system_id?: true
    month?: true
    year?: true
    total_checks?: true
    successful_checks?: true
    uptime_percentage?: true
    average_response_time?: true
    total_downtime?: true
    created_at?: true
  }

  export type SlaReportMaxAggregateInputType = {
    id?: true
    system_id?: true
    month?: true
    year?: true
    total_checks?: true
    successful_checks?: true
    uptime_percentage?: true
    average_response_time?: true
    total_downtime?: true
    created_at?: true
  }

  export type SlaReportCountAggregateInputType = {
    id?: true
    system_id?: true
    month?: true
    year?: true
    total_checks?: true
    successful_checks?: true
    uptime_percentage?: true
    average_response_time?: true
    total_downtime?: true
    created_at?: true
    _all?: true
  }

  export type SlaReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlaReport to aggregate.
     */
    where?: SlaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaReports to fetch.
     */
    orderBy?: SlaReportOrderByWithRelationInput | SlaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SlaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SlaReports
    **/
    _count?: true | SlaReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SlaReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SlaReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SlaReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SlaReportMaxAggregateInputType
  }

  export type GetSlaReportAggregateType<T extends SlaReportAggregateArgs> = {
        [P in keyof T & keyof AggregateSlaReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSlaReport[P]>
      : GetScalarType<T[P], AggregateSlaReport[P]>
  }




  export type SlaReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SlaReportWhereInput
    orderBy?: SlaReportOrderByWithAggregationInput | SlaReportOrderByWithAggregationInput[]
    by: SlaReportScalarFieldEnum[] | SlaReportScalarFieldEnum
    having?: SlaReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SlaReportCountAggregateInputType | true
    _avg?: SlaReportAvgAggregateInputType
    _sum?: SlaReportSumAggregateInputType
    _min?: SlaReportMinAggregateInputType
    _max?: SlaReportMaxAggregateInputType
  }

  export type SlaReportGroupByOutputType = {
    id: string
    system_id: string
    month: number
    year: number
    total_checks: number
    successful_checks: number
    uptime_percentage: number
    average_response_time: number | null
    total_downtime: number
    created_at: Date
    _count: SlaReportCountAggregateOutputType | null
    _avg: SlaReportAvgAggregateOutputType | null
    _sum: SlaReportSumAggregateOutputType | null
    _min: SlaReportMinAggregateOutputType | null
    _max: SlaReportMaxAggregateOutputType | null
  }

  type GetSlaReportGroupByPayload<T extends SlaReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SlaReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SlaReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SlaReportGroupByOutputType[P]>
            : GetScalarType<T[P], SlaReportGroupByOutputType[P]>
        }
      >
    >


  export type SlaReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    system_id?: boolean
    month?: boolean
    year?: boolean
    total_checks?: boolean
    successful_checks?: boolean
    uptime_percentage?: boolean
    average_response_time?: boolean
    total_downtime?: boolean
    created_at?: boolean
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["slaReport"]>



  export type SlaReportSelectScalar = {
    id?: boolean
    system_id?: boolean
    month?: boolean
    year?: boolean
    total_checks?: boolean
    successful_checks?: boolean
    uptime_percentage?: boolean
    average_response_time?: boolean
    total_downtime?: boolean
    created_at?: boolean
  }

  export type SlaReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "system_id" | "month" | "year" | "total_checks" | "successful_checks" | "uptime_percentage" | "average_response_time" | "total_downtime" | "created_at", ExtArgs["result"]["slaReport"]>
  export type SlaReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    system?: boolean | SystemDefaultArgs<ExtArgs>
  }

  export type $SlaReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SlaReport"
    objects: {
      system: Prisma.$SystemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      system_id: string
      month: number
      year: number
      total_checks: number
      successful_checks: number
      uptime_percentage: number
      average_response_time: number | null
      total_downtime: number
      created_at: Date
    }, ExtArgs["result"]["slaReport"]>
    composites: {}
  }

  type SlaReportGetPayload<S extends boolean | null | undefined | SlaReportDefaultArgs> = $Result.GetResult<Prisma.$SlaReportPayload, S>

  type SlaReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SlaReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SlaReportCountAggregateInputType | true
    }

  export interface SlaReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SlaReport'], meta: { name: 'SlaReport' } }
    /**
     * Find zero or one SlaReport that matches the filter.
     * @param {SlaReportFindUniqueArgs} args - Arguments to find a SlaReport
     * @example
     * // Get one SlaReport
     * const slaReport = await prisma.slaReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SlaReportFindUniqueArgs>(args: SelectSubset<T, SlaReportFindUniqueArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SlaReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SlaReportFindUniqueOrThrowArgs} args - Arguments to find a SlaReport
     * @example
     * // Get one SlaReport
     * const slaReport = await prisma.slaReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SlaReportFindUniqueOrThrowArgs>(args: SelectSubset<T, SlaReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SlaReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportFindFirstArgs} args - Arguments to find a SlaReport
     * @example
     * // Get one SlaReport
     * const slaReport = await prisma.slaReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SlaReportFindFirstArgs>(args?: SelectSubset<T, SlaReportFindFirstArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SlaReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportFindFirstOrThrowArgs} args - Arguments to find a SlaReport
     * @example
     * // Get one SlaReport
     * const slaReport = await prisma.slaReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SlaReportFindFirstOrThrowArgs>(args?: SelectSubset<T, SlaReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SlaReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SlaReports
     * const slaReports = await prisma.slaReport.findMany()
     * 
     * // Get first 10 SlaReports
     * const slaReports = await prisma.slaReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const slaReportWithIdOnly = await prisma.slaReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SlaReportFindManyArgs>(args?: SelectSubset<T, SlaReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SlaReport.
     * @param {SlaReportCreateArgs} args - Arguments to create a SlaReport.
     * @example
     * // Create one SlaReport
     * const SlaReport = await prisma.slaReport.create({
     *   data: {
     *     // ... data to create a SlaReport
     *   }
     * })
     * 
     */
    create<T extends SlaReportCreateArgs>(args: SelectSubset<T, SlaReportCreateArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SlaReports.
     * @param {SlaReportCreateManyArgs} args - Arguments to create many SlaReports.
     * @example
     * // Create many SlaReports
     * const slaReport = await prisma.slaReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SlaReportCreateManyArgs>(args?: SelectSubset<T, SlaReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SlaReport.
     * @param {SlaReportDeleteArgs} args - Arguments to delete one SlaReport.
     * @example
     * // Delete one SlaReport
     * const SlaReport = await prisma.slaReport.delete({
     *   where: {
     *     // ... filter to delete one SlaReport
     *   }
     * })
     * 
     */
    delete<T extends SlaReportDeleteArgs>(args: SelectSubset<T, SlaReportDeleteArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SlaReport.
     * @param {SlaReportUpdateArgs} args - Arguments to update one SlaReport.
     * @example
     * // Update one SlaReport
     * const slaReport = await prisma.slaReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SlaReportUpdateArgs>(args: SelectSubset<T, SlaReportUpdateArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SlaReports.
     * @param {SlaReportDeleteManyArgs} args - Arguments to filter SlaReports to delete.
     * @example
     * // Delete a few SlaReports
     * const { count } = await prisma.slaReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SlaReportDeleteManyArgs>(args?: SelectSubset<T, SlaReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SlaReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SlaReports
     * const slaReport = await prisma.slaReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SlaReportUpdateManyArgs>(args: SelectSubset<T, SlaReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SlaReport.
     * @param {SlaReportUpsertArgs} args - Arguments to update or create a SlaReport.
     * @example
     * // Update or create a SlaReport
     * const slaReport = await prisma.slaReport.upsert({
     *   create: {
     *     // ... data to create a SlaReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SlaReport we want to update
     *   }
     * })
     */
    upsert<T extends SlaReportUpsertArgs>(args: SelectSubset<T, SlaReportUpsertArgs<ExtArgs>>): Prisma__SlaReportClient<$Result.GetResult<Prisma.$SlaReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SlaReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportCountArgs} args - Arguments to filter SlaReports to count.
     * @example
     * // Count the number of SlaReports
     * const count = await prisma.slaReport.count({
     *   where: {
     *     // ... the filter for the SlaReports we want to count
     *   }
     * })
    **/
    count<T extends SlaReportCountArgs>(
      args?: Subset<T, SlaReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SlaReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SlaReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SlaReportAggregateArgs>(args: Subset<T, SlaReportAggregateArgs>): Prisma.PrismaPromise<GetSlaReportAggregateType<T>>

    /**
     * Group by SlaReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SlaReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SlaReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SlaReportGroupByArgs['orderBy'] }
        : { orderBy?: SlaReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SlaReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSlaReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SlaReport model
   */
  readonly fields: SlaReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SlaReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SlaReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    system<T extends SystemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SystemDefaultArgs<ExtArgs>>): Prisma__SystemClient<$Result.GetResult<Prisma.$SystemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SlaReport model
   */
  interface SlaReportFieldRefs {
    readonly id: FieldRef<"SlaReport", 'String'>
    readonly system_id: FieldRef<"SlaReport", 'String'>
    readonly month: FieldRef<"SlaReport", 'Int'>
    readonly year: FieldRef<"SlaReport", 'Int'>
    readonly total_checks: FieldRef<"SlaReport", 'Int'>
    readonly successful_checks: FieldRef<"SlaReport", 'Int'>
    readonly uptime_percentage: FieldRef<"SlaReport", 'Float'>
    readonly average_response_time: FieldRef<"SlaReport", 'Float'>
    readonly total_downtime: FieldRef<"SlaReport", 'Int'>
    readonly created_at: FieldRef<"SlaReport", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SlaReport findUnique
   */
  export type SlaReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter, which SlaReport to fetch.
     */
    where: SlaReportWhereUniqueInput
  }

  /**
   * SlaReport findUniqueOrThrow
   */
  export type SlaReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter, which SlaReport to fetch.
     */
    where: SlaReportWhereUniqueInput
  }

  /**
   * SlaReport findFirst
   */
  export type SlaReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter, which SlaReport to fetch.
     */
    where?: SlaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaReports to fetch.
     */
    orderBy?: SlaReportOrderByWithRelationInput | SlaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlaReports.
     */
    cursor?: SlaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlaReports.
     */
    distinct?: SlaReportScalarFieldEnum | SlaReportScalarFieldEnum[]
  }

  /**
   * SlaReport findFirstOrThrow
   */
  export type SlaReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter, which SlaReport to fetch.
     */
    where?: SlaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaReports to fetch.
     */
    orderBy?: SlaReportOrderByWithRelationInput | SlaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SlaReports.
     */
    cursor?: SlaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SlaReports.
     */
    distinct?: SlaReportScalarFieldEnum | SlaReportScalarFieldEnum[]
  }

  /**
   * SlaReport findMany
   */
  export type SlaReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter, which SlaReports to fetch.
     */
    where?: SlaReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SlaReports to fetch.
     */
    orderBy?: SlaReportOrderByWithRelationInput | SlaReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SlaReports.
     */
    cursor?: SlaReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SlaReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SlaReports.
     */
    skip?: number
    distinct?: SlaReportScalarFieldEnum | SlaReportScalarFieldEnum[]
  }

  /**
   * SlaReport create
   */
  export type SlaReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * The data needed to create a SlaReport.
     */
    data: XOR<SlaReportCreateInput, SlaReportUncheckedCreateInput>
  }

  /**
   * SlaReport createMany
   */
  export type SlaReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SlaReports.
     */
    data: SlaReportCreateManyInput | SlaReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SlaReport update
   */
  export type SlaReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * The data needed to update a SlaReport.
     */
    data: XOR<SlaReportUpdateInput, SlaReportUncheckedUpdateInput>
    /**
     * Choose, which SlaReport to update.
     */
    where: SlaReportWhereUniqueInput
  }

  /**
   * SlaReport updateMany
   */
  export type SlaReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SlaReports.
     */
    data: XOR<SlaReportUpdateManyMutationInput, SlaReportUncheckedUpdateManyInput>
    /**
     * Filter which SlaReports to update
     */
    where?: SlaReportWhereInput
    /**
     * Limit how many SlaReports to update.
     */
    limit?: number
  }

  /**
   * SlaReport upsert
   */
  export type SlaReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * The filter to search for the SlaReport to update in case it exists.
     */
    where: SlaReportWhereUniqueInput
    /**
     * In case the SlaReport found by the `where` argument doesn't exist, create a new SlaReport with this data.
     */
    create: XOR<SlaReportCreateInput, SlaReportUncheckedCreateInput>
    /**
     * In case the SlaReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SlaReportUpdateInput, SlaReportUncheckedUpdateInput>
  }

  /**
   * SlaReport delete
   */
  export type SlaReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
    /**
     * Filter which SlaReport to delete.
     */
    where: SlaReportWhereUniqueInput
  }

  /**
   * SlaReport deleteMany
   */
  export type SlaReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SlaReports to delete
     */
    where?: SlaReportWhereInput
    /**
     * Limit how many SlaReports to delete.
     */
    limit?: number
  }

  /**
   * SlaReport without action
   */
  export type SlaReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SlaReport
     */
    select?: SlaReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SlaReport
     */
    omit?: SlaReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SlaReportInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SessionsScalarFieldEnum: {
    sid: 'sid',
    sess: 'sess',
    expire: 'expire'
  };

  export type SessionsScalarFieldEnum = (typeof SessionsScalarFieldEnum)[keyof typeof SessionsScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    first_name: 'first_name',
    last_name: 'last_name',
    profile_image_url: 'profile_image_url',
    role: 'role',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const Audit_logsScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    method: 'method',
    url: 'url',
    ip: 'ip',
    status_code: 'status_code',
    duration_ms: 'duration_ms',
    params: 'params',
    query: 'query',
    body: 'body',
    timestamp: 'timestamp'
  };

  export type Audit_logsScalarFieldEnum = (typeof Audit_logsScalarFieldEnum)[keyof typeof Audit_logsScalarFieldEnum]


  export const SystemScalarFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    monitor_type: 'monitor_type',
    check_interval: 'check_interval',
    timeout: 'timeout',
    status: 'status',
    is_enabled: 'is_enabled',
    alert_email: 'alert_email',
    description: 'description',
    created_by: 'created_by',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SystemScalarFieldEnum = (typeof SystemScalarFieldEnum)[keyof typeof SystemScalarFieldEnum]


  export const StatusLogScalarFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    status: 'status',
    response_time: 'response_time',
    status_code: 'status_code',
    error_message: 'error_message',
    checked_at: 'checked_at'
  };

  export type StatusLogScalarFieldEnum = (typeof StatusLogScalarFieldEnum)[keyof typeof StatusLogScalarFieldEnum]


  export const AlertScalarFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    severity: 'severity',
    status: 'status',
    title: 'title',
    message: 'message',
    acknowledged_by: 'acknowledged_by',
    acknowledged_at: 'acknowledged_at',
    resolved_at: 'resolved_at',
    created_at: 'created_at'
  };

  export type AlertScalarFieldEnum = (typeof AlertScalarFieldEnum)[keyof typeof AlertScalarFieldEnum]


  export const SlaConfigScalarFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    uptime_target: 'uptime_target',
    response_time_target: 'response_time_target',
    alert_on_sla_violation: 'alert_on_sla_violation',
    alert_threshold_minutes: 'alert_threshold_minutes',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type SlaConfigScalarFieldEnum = (typeof SlaConfigScalarFieldEnum)[keyof typeof SlaConfigScalarFieldEnum]


  export const SlaReportScalarFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    month: 'month',
    year: 'year',
    total_checks: 'total_checks',
    successful_checks: 'successful_checks',
    uptime_percentage: 'uptime_percentage',
    average_response_time: 'average_response_time',
    total_downtime: 'total_downtime',
    created_at: 'created_at'
  };

  export type SlaReportScalarFieldEnum = (typeof SlaReportScalarFieldEnum)[keyof typeof SlaReportScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionsOrderByRelevanceFieldEnum: {
    sid: 'sid'
  };

  export type SessionsOrderByRelevanceFieldEnum = (typeof SessionsOrderByRelevanceFieldEnum)[keyof typeof SessionsOrderByRelevanceFieldEnum]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    first_name: 'first_name',
    last_name: 'last_name',
    profile_image_url: 'profile_image_url'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const Audit_logsOrderByRelevanceFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    method: 'method',
    url: 'url',
    ip: 'ip',
    params: 'params',
    query: 'query',
    body: 'body'
  };

  export type Audit_logsOrderByRelevanceFieldEnum = (typeof Audit_logsOrderByRelevanceFieldEnum)[keyof typeof Audit_logsOrderByRelevanceFieldEnum]


  export const SystemOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    url: 'url',
    alert_email: 'alert_email',
    description: 'description',
    created_by: 'created_by'
  };

  export type SystemOrderByRelevanceFieldEnum = (typeof SystemOrderByRelevanceFieldEnum)[keyof typeof SystemOrderByRelevanceFieldEnum]


  export const StatusLogOrderByRelevanceFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    error_message: 'error_message'
  };

  export type StatusLogOrderByRelevanceFieldEnum = (typeof StatusLogOrderByRelevanceFieldEnum)[keyof typeof StatusLogOrderByRelevanceFieldEnum]


  export const AlertOrderByRelevanceFieldEnum: {
    id: 'id',
    system_id: 'system_id',
    title: 'title',
    message: 'message',
    acknowledged_by: 'acknowledged_by'
  };

  export type AlertOrderByRelevanceFieldEnum = (typeof AlertOrderByRelevanceFieldEnum)[keyof typeof AlertOrderByRelevanceFieldEnum]


  export const SlaConfigOrderByRelevanceFieldEnum: {
    id: 'id',
    system_id: 'system_id'
  };

  export type SlaConfigOrderByRelevanceFieldEnum = (typeof SlaConfigOrderByRelevanceFieldEnum)[keyof typeof SlaConfigOrderByRelevanceFieldEnum]


  export const SlaReportOrderByRelevanceFieldEnum: {
    id: 'id',
    system_id: 'system_id'
  };

  export type SlaReportOrderByRelevanceFieldEnum = (typeof SlaReportOrderByRelevanceFieldEnum)[keyof typeof SlaReportOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'MonitorType'
   */
  export type EnumMonitorTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MonitorType'>
    


  /**
   * Reference to a field of type 'SystemStatus'
   */
  export type EnumSystemStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SystemStatus'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'AlertSeverity'
   */
  export type EnumAlertSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertSeverity'>
    


  /**
   * Reference to a field of type 'AlertStatus'
   */
  export type EnumAlertStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AlertStatus'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type SessionsWhereInput = {
    AND?: SessionsWhereInput | SessionsWhereInput[]
    OR?: SessionsWhereInput[]
    NOT?: SessionsWhereInput | SessionsWhereInput[]
    sid?: StringFilter<"Sessions"> | string
    sess?: JsonFilter<"Sessions">
    expire?: DateTimeFilter<"Sessions"> | Date | string
  }

  export type SessionsOrderByWithRelationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
    _relevance?: SessionsOrderByRelevanceInput
  }

  export type SessionsWhereUniqueInput = Prisma.AtLeast<{
    sid?: string
    AND?: SessionsWhereInput | SessionsWhereInput[]
    OR?: SessionsWhereInput[]
    NOT?: SessionsWhereInput | SessionsWhereInput[]
    sess?: JsonFilter<"Sessions">
    expire?: DateTimeFilter<"Sessions"> | Date | string
  }, "sid">

  export type SessionsOrderByWithAggregationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
    _count?: SessionsCountOrderByAggregateInput
    _max?: SessionsMaxOrderByAggregateInput
    _min?: SessionsMinOrderByAggregateInput
  }

  export type SessionsScalarWhereWithAggregatesInput = {
    AND?: SessionsScalarWhereWithAggregatesInput | SessionsScalarWhereWithAggregatesInput[]
    OR?: SessionsScalarWhereWithAggregatesInput[]
    NOT?: SessionsScalarWhereWithAggregatesInput | SessionsScalarWhereWithAggregatesInput[]
    sid?: StringWithAggregatesFilter<"Sessions"> | string
    sess?: JsonWithAggregatesFilter<"Sessions">
    expire?: DateTimeWithAggregatesFilter<"Sessions"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    profile_image_url?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    systems?: SystemListRelationFilter
    alerts_ack?: AlertListRelationFilter
    audit_logs?: Audit_logsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    profile_image_url?: SortOrderInput | SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    systems?: SystemOrderByRelationAggregateInput
    alerts_ack?: AlertOrderByRelationAggregateInput
    audit_logs?: Audit_logsOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    first_name?: StringFilter<"User"> | string
    last_name?: StringFilter<"User"> | string
    profile_image_url?: StringNullableFilter<"User"> | string | null
    role?: EnumRoleFilter<"User"> | $Enums.Role
    created_at?: DateTimeFilter<"User"> | Date | string
    updated_at?: DateTimeFilter<"User"> | Date | string
    systems?: SystemListRelationFilter
    alerts_ack?: AlertListRelationFilter
    audit_logs?: Audit_logsListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    profile_image_url?: SortOrderInput | SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    first_name?: StringWithAggregatesFilter<"User"> | string
    last_name?: StringWithAggregatesFilter<"User"> | string
    profile_image_url?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    created_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type Audit_logsWhereInput = {
    AND?: Audit_logsWhereInput | Audit_logsWhereInput[]
    OR?: Audit_logsWhereInput[]
    NOT?: Audit_logsWhereInput | Audit_logsWhereInput[]
    id?: StringFilter<"Audit_logs"> | string
    user_id?: StringNullableFilter<"Audit_logs"> | string | null
    method?: StringFilter<"Audit_logs"> | string
    url?: StringFilter<"Audit_logs"> | string
    ip?: StringFilter<"Audit_logs"> | string
    status_code?: IntFilter<"Audit_logs"> | number
    duration_ms?: IntFilter<"Audit_logs"> | number
    params?: StringNullableFilter<"Audit_logs"> | string | null
    query?: StringNullableFilter<"Audit_logs"> | string | null
    body?: StringNullableFilter<"Audit_logs"> | string | null
    timestamp?: DateTimeFilter<"Audit_logs"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type Audit_logsOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    method?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    status_code?: SortOrder
    duration_ms?: SortOrder
    params?: SortOrderInput | SortOrder
    query?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: Audit_logsOrderByRelevanceInput
  }

  export type Audit_logsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: Audit_logsWhereInput | Audit_logsWhereInput[]
    OR?: Audit_logsWhereInput[]
    NOT?: Audit_logsWhereInput | Audit_logsWhereInput[]
    user_id?: StringNullableFilter<"Audit_logs"> | string | null
    method?: StringFilter<"Audit_logs"> | string
    url?: StringFilter<"Audit_logs"> | string
    ip?: StringFilter<"Audit_logs"> | string
    status_code?: IntFilter<"Audit_logs"> | number
    duration_ms?: IntFilter<"Audit_logs"> | number
    params?: StringNullableFilter<"Audit_logs"> | string | null
    query?: StringNullableFilter<"Audit_logs"> | string | null
    body?: StringNullableFilter<"Audit_logs"> | string | null
    timestamp?: DateTimeFilter<"Audit_logs"> | Date | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type Audit_logsOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrderInput | SortOrder
    method?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    status_code?: SortOrder
    duration_ms?: SortOrder
    params?: SortOrderInput | SortOrder
    query?: SortOrderInput | SortOrder
    body?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: Audit_logsCountOrderByAggregateInput
    _avg?: Audit_logsAvgOrderByAggregateInput
    _max?: Audit_logsMaxOrderByAggregateInput
    _min?: Audit_logsMinOrderByAggregateInput
    _sum?: Audit_logsSumOrderByAggregateInput
  }

  export type Audit_logsScalarWhereWithAggregatesInput = {
    AND?: Audit_logsScalarWhereWithAggregatesInput | Audit_logsScalarWhereWithAggregatesInput[]
    OR?: Audit_logsScalarWhereWithAggregatesInput[]
    NOT?: Audit_logsScalarWhereWithAggregatesInput | Audit_logsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Audit_logs"> | string
    user_id?: StringNullableWithAggregatesFilter<"Audit_logs"> | string | null
    method?: StringWithAggregatesFilter<"Audit_logs"> | string
    url?: StringWithAggregatesFilter<"Audit_logs"> | string
    ip?: StringWithAggregatesFilter<"Audit_logs"> | string
    status_code?: IntWithAggregatesFilter<"Audit_logs"> | number
    duration_ms?: IntWithAggregatesFilter<"Audit_logs"> | number
    params?: StringNullableWithAggregatesFilter<"Audit_logs"> | string | null
    query?: StringNullableWithAggregatesFilter<"Audit_logs"> | string | null
    body?: StringNullableWithAggregatesFilter<"Audit_logs"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"Audit_logs"> | Date | string
  }

  export type SystemWhereInput = {
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    id?: StringFilter<"System"> | string
    name?: StringFilter<"System"> | string
    url?: StringFilter<"System"> | string
    monitor_type?: EnumMonitorTypeFilter<"System"> | $Enums.MonitorType
    check_interval?: IntFilter<"System"> | number
    timeout?: IntFilter<"System"> | number
    status?: EnumSystemStatusFilter<"System"> | $Enums.SystemStatus
    is_enabled?: BoolFilter<"System"> | boolean
    alert_email?: StringFilter<"System"> | string
    description?: StringFilter<"System"> | string
    created_by?: StringFilter<"System"> | string
    created_at?: DateTimeFilter<"System"> | Date | string
    updated_at?: DateTimeFilter<"System"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    status_logs?: StatusLogListRelationFilter
    alerts?: AlertListRelationFilter
    sla_configs?: XOR<SlaConfigNullableScalarRelationFilter, SlaConfigWhereInput> | null
    sla_reports?: SlaReportListRelationFilter
  }

  export type SystemOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    monitor_type?: SortOrder
    check_interval?: SortOrder
    timeout?: SortOrder
    status?: SortOrder
    is_enabled?: SortOrder
    alert_email?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    status_logs?: StatusLogOrderByRelationAggregateInput
    alerts?: AlertOrderByRelationAggregateInput
    sla_configs?: SlaConfigOrderByWithRelationInput
    sla_reports?: SlaReportOrderByRelationAggregateInput
    _relevance?: SystemOrderByRelevanceInput
  }

  export type SystemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemWhereInput | SystemWhereInput[]
    OR?: SystemWhereInput[]
    NOT?: SystemWhereInput | SystemWhereInput[]
    name?: StringFilter<"System"> | string
    url?: StringFilter<"System"> | string
    monitor_type?: EnumMonitorTypeFilter<"System"> | $Enums.MonitorType
    check_interval?: IntFilter<"System"> | number
    timeout?: IntFilter<"System"> | number
    status?: EnumSystemStatusFilter<"System"> | $Enums.SystemStatus
    is_enabled?: BoolFilter<"System"> | boolean
    alert_email?: StringFilter<"System"> | string
    description?: StringFilter<"System"> | string
    created_by?: StringFilter<"System"> | string
    created_at?: DateTimeFilter<"System"> | Date | string
    updated_at?: DateTimeFilter<"System"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    status_logs?: StatusLogListRelationFilter
    alerts?: AlertListRelationFilter
    sla_configs?: XOR<SlaConfigNullableScalarRelationFilter, SlaConfigWhereInput> | null
    sla_reports?: SlaReportListRelationFilter
  }, "id">

  export type SystemOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    monitor_type?: SortOrder
    check_interval?: SortOrder
    timeout?: SortOrder
    status?: SortOrder
    is_enabled?: SortOrder
    alert_email?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SystemCountOrderByAggregateInput
    _avg?: SystemAvgOrderByAggregateInput
    _max?: SystemMaxOrderByAggregateInput
    _min?: SystemMinOrderByAggregateInput
    _sum?: SystemSumOrderByAggregateInput
  }

  export type SystemScalarWhereWithAggregatesInput = {
    AND?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    OR?: SystemScalarWhereWithAggregatesInput[]
    NOT?: SystemScalarWhereWithAggregatesInput | SystemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"System"> | string
    name?: StringWithAggregatesFilter<"System"> | string
    url?: StringWithAggregatesFilter<"System"> | string
    monitor_type?: EnumMonitorTypeWithAggregatesFilter<"System"> | $Enums.MonitorType
    check_interval?: IntWithAggregatesFilter<"System"> | number
    timeout?: IntWithAggregatesFilter<"System"> | number
    status?: EnumSystemStatusWithAggregatesFilter<"System"> | $Enums.SystemStatus
    is_enabled?: BoolWithAggregatesFilter<"System"> | boolean
    alert_email?: StringWithAggregatesFilter<"System"> | string
    description?: StringWithAggregatesFilter<"System"> | string
    created_by?: StringWithAggregatesFilter<"System"> | string
    created_at?: DateTimeWithAggregatesFilter<"System"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"System"> | Date | string
  }

  export type StatusLogWhereInput = {
    AND?: StatusLogWhereInput | StatusLogWhereInput[]
    OR?: StatusLogWhereInput[]
    NOT?: StatusLogWhereInput | StatusLogWhereInput[]
    id?: StringFilter<"StatusLog"> | string
    system_id?: StringFilter<"StatusLog"> | string
    status?: EnumSystemStatusFilter<"StatusLog"> | $Enums.SystemStatus
    response_time?: IntNullableFilter<"StatusLog"> | number | null
    status_code?: IntNullableFilter<"StatusLog"> | number | null
    error_message?: StringNullableFilter<"StatusLog"> | string | null
    checked_at?: DateTimeFilter<"StatusLog"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }

  export type StatusLogOrderByWithRelationInput = {
    id?: SortOrder
    system_id?: SortOrder
    status?: SortOrder
    response_time?: SortOrderInput | SortOrder
    status_code?: SortOrderInput | SortOrder
    error_message?: SortOrderInput | SortOrder
    checked_at?: SortOrder
    system?: SystemOrderByWithRelationInput
    _relevance?: StatusLogOrderByRelevanceInput
  }

  export type StatusLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StatusLogWhereInput | StatusLogWhereInput[]
    OR?: StatusLogWhereInput[]
    NOT?: StatusLogWhereInput | StatusLogWhereInput[]
    system_id?: StringFilter<"StatusLog"> | string
    status?: EnumSystemStatusFilter<"StatusLog"> | $Enums.SystemStatus
    response_time?: IntNullableFilter<"StatusLog"> | number | null
    status_code?: IntNullableFilter<"StatusLog"> | number | null
    error_message?: StringNullableFilter<"StatusLog"> | string | null
    checked_at?: DateTimeFilter<"StatusLog"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }, "id">

  export type StatusLogOrderByWithAggregationInput = {
    id?: SortOrder
    system_id?: SortOrder
    status?: SortOrder
    response_time?: SortOrderInput | SortOrder
    status_code?: SortOrderInput | SortOrder
    error_message?: SortOrderInput | SortOrder
    checked_at?: SortOrder
    _count?: StatusLogCountOrderByAggregateInput
    _avg?: StatusLogAvgOrderByAggregateInput
    _max?: StatusLogMaxOrderByAggregateInput
    _min?: StatusLogMinOrderByAggregateInput
    _sum?: StatusLogSumOrderByAggregateInput
  }

  export type StatusLogScalarWhereWithAggregatesInput = {
    AND?: StatusLogScalarWhereWithAggregatesInput | StatusLogScalarWhereWithAggregatesInput[]
    OR?: StatusLogScalarWhereWithAggregatesInput[]
    NOT?: StatusLogScalarWhereWithAggregatesInput | StatusLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StatusLog"> | string
    system_id?: StringWithAggregatesFilter<"StatusLog"> | string
    status?: EnumSystemStatusWithAggregatesFilter<"StatusLog"> | $Enums.SystemStatus
    response_time?: IntNullableWithAggregatesFilter<"StatusLog"> | number | null
    status_code?: IntNullableWithAggregatesFilter<"StatusLog"> | number | null
    error_message?: StringNullableWithAggregatesFilter<"StatusLog"> | string | null
    checked_at?: DateTimeWithAggregatesFilter<"StatusLog"> | Date | string
  }

  export type AlertWhereInput = {
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    id?: StringFilter<"Alert"> | string
    system_id?: StringFilter<"Alert"> | string
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    title?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    acknowledged_by?: StringNullableFilter<"Alert"> | string | null
    acknowledged_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    resolved_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    created_at?: DateTimeFilter<"Alert"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
    acknowledgedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type AlertOrderByWithRelationInput = {
    id?: SortOrder
    system_id?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    title?: SortOrder
    message?: SortOrder
    acknowledged_by?: SortOrderInput | SortOrder
    acknowledged_at?: SortOrderInput | SortOrder
    resolved_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    system?: SystemOrderByWithRelationInput
    acknowledgedBy?: UserOrderByWithRelationInput
    _relevance?: AlertOrderByRelevanceInput
  }

  export type AlertWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlertWhereInput | AlertWhereInput[]
    OR?: AlertWhereInput[]
    NOT?: AlertWhereInput | AlertWhereInput[]
    system_id?: StringFilter<"Alert"> | string
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    title?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    acknowledged_by?: StringNullableFilter<"Alert"> | string | null
    acknowledged_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    resolved_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    created_at?: DateTimeFilter<"Alert"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
    acknowledgedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type AlertOrderByWithAggregationInput = {
    id?: SortOrder
    system_id?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    title?: SortOrder
    message?: SortOrder
    acknowledged_by?: SortOrderInput | SortOrder
    acknowledged_at?: SortOrderInput | SortOrder
    resolved_at?: SortOrderInput | SortOrder
    created_at?: SortOrder
    _count?: AlertCountOrderByAggregateInput
    _max?: AlertMaxOrderByAggregateInput
    _min?: AlertMinOrderByAggregateInput
  }

  export type AlertScalarWhereWithAggregatesInput = {
    AND?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    OR?: AlertScalarWhereWithAggregatesInput[]
    NOT?: AlertScalarWhereWithAggregatesInput | AlertScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Alert"> | string
    system_id?: StringWithAggregatesFilter<"Alert"> | string
    severity?: EnumAlertSeverityWithAggregatesFilter<"Alert"> | $Enums.AlertSeverity
    status?: EnumAlertStatusWithAggregatesFilter<"Alert"> | $Enums.AlertStatus
    title?: StringWithAggregatesFilter<"Alert"> | string
    message?: StringWithAggregatesFilter<"Alert"> | string
    acknowledged_by?: StringNullableWithAggregatesFilter<"Alert"> | string | null
    acknowledged_at?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
    resolved_at?: DateTimeNullableWithAggregatesFilter<"Alert"> | Date | string | null
    created_at?: DateTimeWithAggregatesFilter<"Alert"> | Date | string
  }

  export type SlaConfigWhereInput = {
    AND?: SlaConfigWhereInput | SlaConfigWhereInput[]
    OR?: SlaConfigWhereInput[]
    NOT?: SlaConfigWhereInput | SlaConfigWhereInput[]
    id?: StringFilter<"SlaConfig"> | string
    system_id?: StringFilter<"SlaConfig"> | string
    uptime_target?: FloatFilter<"SlaConfig"> | number
    response_time_target?: IntFilter<"SlaConfig"> | number
    alert_on_sla_violation?: BoolFilter<"SlaConfig"> | boolean
    alert_threshold_minutes?: IntFilter<"SlaConfig"> | number
    created_at?: DateTimeFilter<"SlaConfig"> | Date | string
    updated_at?: DateTimeFilter<"SlaConfig"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }

  export type SlaConfigOrderByWithRelationInput = {
    id?: SortOrder
    system_id?: SortOrder
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_on_sla_violation?: SortOrder
    alert_threshold_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    system?: SystemOrderByWithRelationInput
    _relevance?: SlaConfigOrderByRelevanceInput
  }

  export type SlaConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    system_id?: string
    AND?: SlaConfigWhereInput | SlaConfigWhereInput[]
    OR?: SlaConfigWhereInput[]
    NOT?: SlaConfigWhereInput | SlaConfigWhereInput[]
    uptime_target?: FloatFilter<"SlaConfig"> | number
    response_time_target?: IntFilter<"SlaConfig"> | number
    alert_on_sla_violation?: BoolFilter<"SlaConfig"> | boolean
    alert_threshold_minutes?: IntFilter<"SlaConfig"> | number
    created_at?: DateTimeFilter<"SlaConfig"> | Date | string
    updated_at?: DateTimeFilter<"SlaConfig"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }, "id" | "system_id">

  export type SlaConfigOrderByWithAggregationInput = {
    id?: SortOrder
    system_id?: SortOrder
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_on_sla_violation?: SortOrder
    alert_threshold_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: SlaConfigCountOrderByAggregateInput
    _avg?: SlaConfigAvgOrderByAggregateInput
    _max?: SlaConfigMaxOrderByAggregateInput
    _min?: SlaConfigMinOrderByAggregateInput
    _sum?: SlaConfigSumOrderByAggregateInput
  }

  export type SlaConfigScalarWhereWithAggregatesInput = {
    AND?: SlaConfigScalarWhereWithAggregatesInput | SlaConfigScalarWhereWithAggregatesInput[]
    OR?: SlaConfigScalarWhereWithAggregatesInput[]
    NOT?: SlaConfigScalarWhereWithAggregatesInput | SlaConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SlaConfig"> | string
    system_id?: StringWithAggregatesFilter<"SlaConfig"> | string
    uptime_target?: FloatWithAggregatesFilter<"SlaConfig"> | number
    response_time_target?: IntWithAggregatesFilter<"SlaConfig"> | number
    alert_on_sla_violation?: BoolWithAggregatesFilter<"SlaConfig"> | boolean
    alert_threshold_minutes?: IntWithAggregatesFilter<"SlaConfig"> | number
    created_at?: DateTimeWithAggregatesFilter<"SlaConfig"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"SlaConfig"> | Date | string
  }

  export type SlaReportWhereInput = {
    AND?: SlaReportWhereInput | SlaReportWhereInput[]
    OR?: SlaReportWhereInput[]
    NOT?: SlaReportWhereInput | SlaReportWhereInput[]
    id?: StringFilter<"SlaReport"> | string
    system_id?: StringFilter<"SlaReport"> | string
    month?: IntFilter<"SlaReport"> | number
    year?: IntFilter<"SlaReport"> | number
    total_checks?: IntFilter<"SlaReport"> | number
    successful_checks?: IntFilter<"SlaReport"> | number
    uptime_percentage?: FloatFilter<"SlaReport"> | number
    average_response_time?: FloatNullableFilter<"SlaReport"> | number | null
    total_downtime?: IntFilter<"SlaReport"> | number
    created_at?: DateTimeFilter<"SlaReport"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }

  export type SlaReportOrderByWithRelationInput = {
    id?: SortOrder
    system_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrderInput | SortOrder
    total_downtime?: SortOrder
    created_at?: SortOrder
    system?: SystemOrderByWithRelationInput
    _relevance?: SlaReportOrderByRelevanceInput
  }

  export type SlaReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SlaReportWhereInput | SlaReportWhereInput[]
    OR?: SlaReportWhereInput[]
    NOT?: SlaReportWhereInput | SlaReportWhereInput[]
    system_id?: StringFilter<"SlaReport"> | string
    month?: IntFilter<"SlaReport"> | number
    year?: IntFilter<"SlaReport"> | number
    total_checks?: IntFilter<"SlaReport"> | number
    successful_checks?: IntFilter<"SlaReport"> | number
    uptime_percentage?: FloatFilter<"SlaReport"> | number
    average_response_time?: FloatNullableFilter<"SlaReport"> | number | null
    total_downtime?: IntFilter<"SlaReport"> | number
    created_at?: DateTimeFilter<"SlaReport"> | Date | string
    system?: XOR<SystemScalarRelationFilter, SystemWhereInput>
  }, "id">

  export type SlaReportOrderByWithAggregationInput = {
    id?: SortOrder
    system_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrderInput | SortOrder
    total_downtime?: SortOrder
    created_at?: SortOrder
    _count?: SlaReportCountOrderByAggregateInput
    _avg?: SlaReportAvgOrderByAggregateInput
    _max?: SlaReportMaxOrderByAggregateInput
    _min?: SlaReportMinOrderByAggregateInput
    _sum?: SlaReportSumOrderByAggregateInput
  }

  export type SlaReportScalarWhereWithAggregatesInput = {
    AND?: SlaReportScalarWhereWithAggregatesInput | SlaReportScalarWhereWithAggregatesInput[]
    OR?: SlaReportScalarWhereWithAggregatesInput[]
    NOT?: SlaReportScalarWhereWithAggregatesInput | SlaReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SlaReport"> | string
    system_id?: StringWithAggregatesFilter<"SlaReport"> | string
    month?: IntWithAggregatesFilter<"SlaReport"> | number
    year?: IntWithAggregatesFilter<"SlaReport"> | number
    total_checks?: IntWithAggregatesFilter<"SlaReport"> | number
    successful_checks?: IntWithAggregatesFilter<"SlaReport"> | number
    uptime_percentage?: FloatWithAggregatesFilter<"SlaReport"> | number
    average_response_time?: FloatNullableWithAggregatesFilter<"SlaReport"> | number | null
    total_downtime?: IntWithAggregatesFilter<"SlaReport"> | number
    created_at?: DateTimeWithAggregatesFilter<"SlaReport"> | Date | string
  }

  export type SessionsCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionsUncheckedCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionsUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUncheckedUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsCreateManyInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionsUpdateManyMutationInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionsUncheckedUpdateManyInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemCreateNestedManyWithoutCreatedByInput
    alerts_ack?: AlertCreateNestedManyWithoutAcknowledgedByInput
    audit_logs?: Audit_logsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemUncheckedCreateNestedManyWithoutCreatedByInput
    alerts_ack?: AlertUncheckedCreateNestedManyWithoutAcknowledgedByInput
    audit_logs?: Audit_logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUpdateManyWithoutCreatedByNestedInput
    alerts_ack?: AlertUpdateManyWithoutAcknowledgedByNestedInput
    audit_logs?: Audit_logsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUncheckedUpdateManyWithoutCreatedByNestedInput
    alerts_ack?: AlertUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    audit_logs?: Audit_logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsCreateInput = {
    id?: string
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
    user?: UserCreateNestedOneWithoutAudit_logsInput
  }

  export type Audit_logsUncheckedCreateInput = {
    id?: string
    user_id?: string | null
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
  }

  export type Audit_logsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAudit_logsNestedInput
  }

  export type Audit_logsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsCreateManyInput = {
    id?: string
    user_id?: string | null
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
  }

  export type Audit_logsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    user_id?: NullableStringFieldUpdateOperationsInput | string | null
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemCreateInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UserCreateNestedOneWithoutSystemsInput
    status_logs?: StatusLogCreateNestedManyWithoutSystemInput
    alerts?: AlertCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogUncheckedCreateNestedManyWithoutSystemInput
    alerts?: AlertUncheckedCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigUncheckedCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSystemsNestedInput
    status_logs?: StatusLogUpdateManyWithoutSystemNestedInput
    alerts?: AlertUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUncheckedUpdateManyWithoutSystemNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUncheckedUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type SystemCreateManyInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SystemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogCreateInput = {
    id?: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
    system: SystemCreateNestedOneWithoutStatus_logsInput
  }

  export type StatusLogUncheckedCreateInput = {
    id?: string
    system_id: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
  }

  export type StatusLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system?: SystemUpdateOneRequiredWithoutStatus_logsNestedInput
  }

  export type StatusLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogCreateManyInput = {
    id?: string
    system_id: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
  }

  export type StatusLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateInput = {
    id?: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
    system: SystemCreateNestedOneWithoutAlertsInput
    acknowledgedBy?: UserCreateNestedOneWithoutAlerts_ackInput
  }

  export type AlertUncheckedCreateInput = {
    id?: string
    system_id: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_by?: string | null
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type AlertUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system?: SystemUpdateOneRequiredWithoutAlertsNestedInput
    acknowledgedBy?: UserUpdateOneWithoutAlerts_ackNestedInput
  }

  export type AlertUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_by?: NullableStringFieldUpdateOperationsInput | string | null
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertCreateManyInput = {
    id?: string
    system_id: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_by?: string | null
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type AlertUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_by?: NullableStringFieldUpdateOperationsInput | string | null
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaConfigCreateInput = {
    id?: string
    uptime_target?: number
    response_time_target?: number
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: number
    created_at?: Date | string
    updated_at?: Date | string
    system: SystemCreateNestedOneWithoutSla_configsInput
  }

  export type SlaConfigUncheckedCreateInput = {
    id?: string
    system_id: string
    uptime_target?: number
    response_time_target?: number
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SlaConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system?: SystemUpdateOneRequiredWithoutSla_configsNestedInput
  }

  export type SlaConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaConfigCreateManyInput = {
    id?: string
    system_id: string
    uptime_target?: number
    response_time_target?: number
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SlaConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportCreateInput = {
    id?: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
    system: SystemCreateNestedOneWithoutSla_reportsInput
  }

  export type SlaReportUncheckedCreateInput = {
    id?: string
    system_id: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
  }

  export type SlaReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system?: SystemUpdateOneRequiredWithoutSla_reportsNestedInput
  }

  export type SlaReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportCreateManyInput = {
    id?: string
    system_id: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
  }

  export type SlaReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionsOrderByRelevanceInput = {
    fields: SessionsOrderByRelevanceFieldEnum | SessionsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionsCountOrderByAggregateInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type SessionsMaxOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }

  export type SessionsMinOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type SystemListRelationFilter = {
    every?: SystemWhereInput
    some?: SystemWhereInput
    none?: SystemWhereInput
  }

  export type AlertListRelationFilter = {
    every?: AlertWhereInput
    some?: AlertWhereInput
    none?: AlertWhereInput
  }

  export type Audit_logsListRelationFilter = {
    every?: Audit_logsWhereInput
    some?: Audit_logsWhereInput
    none?: Audit_logsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SystemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlertOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type Audit_logsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    profile_image_url?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    profile_image_url?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    profile_image_url?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type Audit_logsOrderByRelevanceInput = {
    fields: Audit_logsOrderByRelevanceFieldEnum | Audit_logsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type Audit_logsCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    method?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    status_code?: SortOrder
    duration_ms?: SortOrder
    params?: SortOrder
    query?: SortOrder
    body?: SortOrder
    timestamp?: SortOrder
  }

  export type Audit_logsAvgOrderByAggregateInput = {
    status_code?: SortOrder
    duration_ms?: SortOrder
  }

  export type Audit_logsMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    method?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    status_code?: SortOrder
    duration_ms?: SortOrder
    params?: SortOrder
    query?: SortOrder
    body?: SortOrder
    timestamp?: SortOrder
  }

  export type Audit_logsMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    method?: SortOrder
    url?: SortOrder
    ip?: SortOrder
    status_code?: SortOrder
    duration_ms?: SortOrder
    params?: SortOrder
    query?: SortOrder
    body?: SortOrder
    timestamp?: SortOrder
  }

  export type Audit_logsSumOrderByAggregateInput = {
    status_code?: SortOrder
    duration_ms?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumMonitorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MonitorType | EnumMonitorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MonitorType[]
    notIn?: $Enums.MonitorType[]
    not?: NestedEnumMonitorTypeFilter<$PrismaModel> | $Enums.MonitorType
  }

  export type EnumSystemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SystemStatus | EnumSystemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SystemStatus[]
    notIn?: $Enums.SystemStatus[]
    not?: NestedEnumSystemStatusFilter<$PrismaModel> | $Enums.SystemStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StatusLogListRelationFilter = {
    every?: StatusLogWhereInput
    some?: StatusLogWhereInput
    none?: StatusLogWhereInput
  }

  export type SlaConfigNullableScalarRelationFilter = {
    is?: SlaConfigWhereInput | null
    isNot?: SlaConfigWhereInput | null
  }

  export type SlaReportListRelationFilter = {
    every?: SlaReportWhereInput
    some?: SlaReportWhereInput
    none?: SlaReportWhereInput
  }

  export type StatusLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SlaReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SystemOrderByRelevanceInput = {
    fields: SystemOrderByRelevanceFieldEnum | SystemOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SystemCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    monitor_type?: SortOrder
    check_interval?: SortOrder
    timeout?: SortOrder
    status?: SortOrder
    is_enabled?: SortOrder
    alert_email?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemAvgOrderByAggregateInput = {
    check_interval?: SortOrder
    timeout?: SortOrder
  }

  export type SystemMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    monitor_type?: SortOrder
    check_interval?: SortOrder
    timeout?: SortOrder
    status?: SortOrder
    is_enabled?: SortOrder
    alert_email?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    url?: SortOrder
    monitor_type?: SortOrder
    check_interval?: SortOrder
    timeout?: SortOrder
    status?: SortOrder
    is_enabled?: SortOrder
    alert_email?: SortOrder
    description?: SortOrder
    created_by?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SystemSumOrderByAggregateInput = {
    check_interval?: SortOrder
    timeout?: SortOrder
  }

  export type EnumMonitorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MonitorType | EnumMonitorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MonitorType[]
    notIn?: $Enums.MonitorType[]
    not?: NestedEnumMonitorTypeWithAggregatesFilter<$PrismaModel> | $Enums.MonitorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMonitorTypeFilter<$PrismaModel>
    _max?: NestedEnumMonitorTypeFilter<$PrismaModel>
  }

  export type EnumSystemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SystemStatus | EnumSystemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SystemStatus[]
    notIn?: $Enums.SystemStatus[]
    not?: NestedEnumSystemStatusWithAggregatesFilter<$PrismaModel> | $Enums.SystemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSystemStatusFilter<$PrismaModel>
    _max?: NestedEnumSystemStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SystemScalarRelationFilter = {
    is?: SystemWhereInput
    isNot?: SystemWhereInput
  }

  export type StatusLogOrderByRelevanceInput = {
    fields: StatusLogOrderByRelevanceFieldEnum | StatusLogOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type StatusLogCountOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    status?: SortOrder
    response_time?: SortOrder
    status_code?: SortOrder
    error_message?: SortOrder
    checked_at?: SortOrder
  }

  export type StatusLogAvgOrderByAggregateInput = {
    response_time?: SortOrder
    status_code?: SortOrder
  }

  export type StatusLogMaxOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    status?: SortOrder
    response_time?: SortOrder
    status_code?: SortOrder
    error_message?: SortOrder
    checked_at?: SortOrder
  }

  export type StatusLogMinOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    status?: SortOrder
    response_time?: SortOrder
    status_code?: SortOrder
    error_message?: SortOrder
    checked_at?: SortOrder
  }

  export type StatusLogSumOrderByAggregateInput = {
    response_time?: SortOrder
    status_code?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[]
    notIn?: $Enums.AlertSeverity[]
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type EnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[]
    notIn?: $Enums.AlertStatus[]
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AlertOrderByRelevanceInput = {
    fields: AlertOrderByRelevanceFieldEnum | AlertOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AlertCountOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    title?: SortOrder
    message?: SortOrder
    acknowledged_by?: SortOrder
    acknowledged_at?: SortOrder
    resolved_at?: SortOrder
    created_at?: SortOrder
  }

  export type AlertMaxOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    title?: SortOrder
    message?: SortOrder
    acknowledged_by?: SortOrder
    acknowledged_at?: SortOrder
    resolved_at?: SortOrder
    created_at?: SortOrder
  }

  export type AlertMinOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    title?: SortOrder
    message?: SortOrder
    acknowledged_by?: SortOrder
    acknowledged_at?: SortOrder
    resolved_at?: SortOrder
    created_at?: SortOrder
  }

  export type EnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[]
    notIn?: $Enums.AlertSeverity[]
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type EnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[]
    notIn?: $Enums.AlertStatus[]
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SlaConfigOrderByRelevanceInput = {
    fields: SlaConfigOrderByRelevanceFieldEnum | SlaConfigOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SlaConfigCountOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_on_sla_violation?: SortOrder
    alert_threshold_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SlaConfigAvgOrderByAggregateInput = {
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_threshold_minutes?: SortOrder
  }

  export type SlaConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_on_sla_violation?: SortOrder
    alert_threshold_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SlaConfigMinOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_on_sla_violation?: SortOrder
    alert_threshold_minutes?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type SlaConfigSumOrderByAggregateInput = {
    uptime_target?: SortOrder
    response_time_target?: SortOrder
    alert_threshold_minutes?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SlaReportOrderByRelevanceInput = {
    fields: SlaReportOrderByRelevanceFieldEnum | SlaReportOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SlaReportCountOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrder
    total_downtime?: SortOrder
    created_at?: SortOrder
  }

  export type SlaReportAvgOrderByAggregateInput = {
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrder
    total_downtime?: SortOrder
  }

  export type SlaReportMaxOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrder
    total_downtime?: SortOrder
    created_at?: SortOrder
  }

  export type SlaReportMinOrderByAggregateInput = {
    id?: SortOrder
    system_id?: SortOrder
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrder
    total_downtime?: SortOrder
    created_at?: SortOrder
  }

  export type SlaReportSumOrderByAggregateInput = {
    month?: SortOrder
    year?: SortOrder
    total_checks?: SortOrder
    successful_checks?: SortOrder
    uptime_percentage?: SortOrder
    average_response_time?: SortOrder
    total_downtime?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SystemCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput> | SystemCreateWithoutCreatedByInput[] | SystemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SystemCreateOrConnectWithoutCreatedByInput | SystemCreateOrConnectWithoutCreatedByInput[]
    createMany?: SystemCreateManyCreatedByInputEnvelope
    connect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutAcknowledgedByInput = {
    create?: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput> | AlertCreateWithoutAcknowledgedByInput[] | AlertUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutAcknowledgedByInput | AlertCreateOrConnectWithoutAcknowledgedByInput[]
    createMany?: AlertCreateManyAcknowledgedByInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type Audit_logsCreateNestedManyWithoutUserInput = {
    create?: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput> | Audit_logsCreateWithoutUserInput[] | Audit_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Audit_logsCreateOrConnectWithoutUserInput | Audit_logsCreateOrConnectWithoutUserInput[]
    createMany?: Audit_logsCreateManyUserInputEnvelope
    connect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
  }

  export type SystemUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput> | SystemCreateWithoutCreatedByInput[] | SystemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SystemCreateOrConnectWithoutCreatedByInput | SystemCreateOrConnectWithoutCreatedByInput[]
    createMany?: SystemCreateManyCreatedByInputEnvelope
    connect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutAcknowledgedByInput = {
    create?: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput> | AlertCreateWithoutAcknowledgedByInput[] | AlertUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutAcknowledgedByInput | AlertCreateOrConnectWithoutAcknowledgedByInput[]
    createMany?: AlertCreateManyAcknowledgedByInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type Audit_logsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput> | Audit_logsCreateWithoutUserInput[] | Audit_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Audit_logsCreateOrConnectWithoutUserInput | Audit_logsCreateOrConnectWithoutUserInput[]
    createMany?: Audit_logsCreateManyUserInputEnvelope
    connect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type SystemUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput> | SystemCreateWithoutCreatedByInput[] | SystemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SystemCreateOrConnectWithoutCreatedByInput | SystemCreateOrConnectWithoutCreatedByInput[]
    upsert?: SystemUpsertWithWhereUniqueWithoutCreatedByInput | SystemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SystemCreateManyCreatedByInputEnvelope
    set?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    disconnect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    delete?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    connect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    update?: SystemUpdateWithWhereUniqueWithoutCreatedByInput | SystemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SystemUpdateManyWithWhereWithoutCreatedByInput | SystemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SystemScalarWhereInput | SystemScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutAcknowledgedByNestedInput = {
    create?: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput> | AlertCreateWithoutAcknowledgedByInput[] | AlertUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutAcknowledgedByInput | AlertCreateOrConnectWithoutAcknowledgedByInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutAcknowledgedByInput | AlertUpsertWithWhereUniqueWithoutAcknowledgedByInput[]
    createMany?: AlertCreateManyAcknowledgedByInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutAcknowledgedByInput | AlertUpdateWithWhereUniqueWithoutAcknowledgedByInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutAcknowledgedByInput | AlertUpdateManyWithWhereWithoutAcknowledgedByInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type Audit_logsUpdateManyWithoutUserNestedInput = {
    create?: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput> | Audit_logsCreateWithoutUserInput[] | Audit_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Audit_logsCreateOrConnectWithoutUserInput | Audit_logsCreateOrConnectWithoutUserInput[]
    upsert?: Audit_logsUpsertWithWhereUniqueWithoutUserInput | Audit_logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Audit_logsCreateManyUserInputEnvelope
    set?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    disconnect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    delete?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    connect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    update?: Audit_logsUpdateWithWhereUniqueWithoutUserInput | Audit_logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Audit_logsUpdateManyWithWhereWithoutUserInput | Audit_logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Audit_logsScalarWhereInput | Audit_logsScalarWhereInput[]
  }

  export type SystemUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput> | SystemCreateWithoutCreatedByInput[] | SystemUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: SystemCreateOrConnectWithoutCreatedByInput | SystemCreateOrConnectWithoutCreatedByInput[]
    upsert?: SystemUpsertWithWhereUniqueWithoutCreatedByInput | SystemUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: SystemCreateManyCreatedByInputEnvelope
    set?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    disconnect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    delete?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    connect?: SystemWhereUniqueInput | SystemWhereUniqueInput[]
    update?: SystemUpdateWithWhereUniqueWithoutCreatedByInput | SystemUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: SystemUpdateManyWithWhereWithoutCreatedByInput | SystemUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: SystemScalarWhereInput | SystemScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutAcknowledgedByNestedInput = {
    create?: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput> | AlertCreateWithoutAcknowledgedByInput[] | AlertUncheckedCreateWithoutAcknowledgedByInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutAcknowledgedByInput | AlertCreateOrConnectWithoutAcknowledgedByInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutAcknowledgedByInput | AlertUpsertWithWhereUniqueWithoutAcknowledgedByInput[]
    createMany?: AlertCreateManyAcknowledgedByInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutAcknowledgedByInput | AlertUpdateWithWhereUniqueWithoutAcknowledgedByInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutAcknowledgedByInput | AlertUpdateManyWithWhereWithoutAcknowledgedByInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type Audit_logsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput> | Audit_logsCreateWithoutUserInput[] | Audit_logsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: Audit_logsCreateOrConnectWithoutUserInput | Audit_logsCreateOrConnectWithoutUserInput[]
    upsert?: Audit_logsUpsertWithWhereUniqueWithoutUserInput | Audit_logsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: Audit_logsCreateManyUserInputEnvelope
    set?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    disconnect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    delete?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    connect?: Audit_logsWhereUniqueInput | Audit_logsWhereUniqueInput[]
    update?: Audit_logsUpdateWithWhereUniqueWithoutUserInput | Audit_logsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: Audit_logsUpdateManyWithWhereWithoutUserInput | Audit_logsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: Audit_logsScalarWhereInput | Audit_logsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAudit_logsInput = {
    create?: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAudit_logsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneWithoutAudit_logsNestedInput = {
    create?: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAudit_logsInput
    upsert?: UserUpsertWithoutAudit_logsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAudit_logsInput, UserUpdateWithoutAudit_logsInput>, UserUncheckedUpdateWithoutAudit_logsInput>
  }

  export type UserCreateNestedOneWithoutSystemsInput = {
    create?: XOR<UserCreateWithoutSystemsInput, UserUncheckedCreateWithoutSystemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemsInput
    connect?: UserWhereUniqueInput
  }

  export type StatusLogCreateNestedManyWithoutSystemInput = {
    create?: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput> | StatusLogCreateWithoutSystemInput[] | StatusLogUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: StatusLogCreateOrConnectWithoutSystemInput | StatusLogCreateOrConnectWithoutSystemInput[]
    createMany?: StatusLogCreateManySystemInputEnvelope
    connect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
  }

  export type AlertCreateNestedManyWithoutSystemInput = {
    create?: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput> | AlertCreateWithoutSystemInput[] | AlertUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutSystemInput | AlertCreateOrConnectWithoutSystemInput[]
    createMany?: AlertCreateManySystemInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type SlaConfigCreateNestedOneWithoutSystemInput = {
    create?: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
    connectOrCreate?: SlaConfigCreateOrConnectWithoutSystemInput
    connect?: SlaConfigWhereUniqueInput
  }

  export type SlaReportCreateNestedManyWithoutSystemInput = {
    create?: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput> | SlaReportCreateWithoutSystemInput[] | SlaReportUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: SlaReportCreateOrConnectWithoutSystemInput | SlaReportCreateOrConnectWithoutSystemInput[]
    createMany?: SlaReportCreateManySystemInputEnvelope
    connect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
  }

  export type StatusLogUncheckedCreateNestedManyWithoutSystemInput = {
    create?: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput> | StatusLogCreateWithoutSystemInput[] | StatusLogUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: StatusLogCreateOrConnectWithoutSystemInput | StatusLogCreateOrConnectWithoutSystemInput[]
    createMany?: StatusLogCreateManySystemInputEnvelope
    connect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
  }

  export type AlertUncheckedCreateNestedManyWithoutSystemInput = {
    create?: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput> | AlertCreateWithoutSystemInput[] | AlertUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutSystemInput | AlertCreateOrConnectWithoutSystemInput[]
    createMany?: AlertCreateManySystemInputEnvelope
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
  }

  export type SlaConfigUncheckedCreateNestedOneWithoutSystemInput = {
    create?: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
    connectOrCreate?: SlaConfigCreateOrConnectWithoutSystemInput
    connect?: SlaConfigWhereUniqueInput
  }

  export type SlaReportUncheckedCreateNestedManyWithoutSystemInput = {
    create?: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput> | SlaReportCreateWithoutSystemInput[] | SlaReportUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: SlaReportCreateOrConnectWithoutSystemInput | SlaReportCreateOrConnectWithoutSystemInput[]
    createMany?: SlaReportCreateManySystemInputEnvelope
    connect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
  }

  export type EnumMonitorTypeFieldUpdateOperationsInput = {
    set?: $Enums.MonitorType
  }

  export type EnumSystemStatusFieldUpdateOperationsInput = {
    set?: $Enums.SystemStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutSystemsNestedInput = {
    create?: XOR<UserCreateWithoutSystemsInput, UserUncheckedCreateWithoutSystemsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSystemsInput
    upsert?: UserUpsertWithoutSystemsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSystemsInput, UserUpdateWithoutSystemsInput>, UserUncheckedUpdateWithoutSystemsInput>
  }

  export type StatusLogUpdateManyWithoutSystemNestedInput = {
    create?: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput> | StatusLogCreateWithoutSystemInput[] | StatusLogUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: StatusLogCreateOrConnectWithoutSystemInput | StatusLogCreateOrConnectWithoutSystemInput[]
    upsert?: StatusLogUpsertWithWhereUniqueWithoutSystemInput | StatusLogUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: StatusLogCreateManySystemInputEnvelope
    set?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    disconnect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    delete?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    connect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    update?: StatusLogUpdateWithWhereUniqueWithoutSystemInput | StatusLogUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: StatusLogUpdateManyWithWhereWithoutSystemInput | StatusLogUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: StatusLogScalarWhereInput | StatusLogScalarWhereInput[]
  }

  export type AlertUpdateManyWithoutSystemNestedInput = {
    create?: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput> | AlertCreateWithoutSystemInput[] | AlertUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutSystemInput | AlertCreateOrConnectWithoutSystemInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutSystemInput | AlertUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: AlertCreateManySystemInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutSystemInput | AlertUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutSystemInput | AlertUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type SlaConfigUpdateOneWithoutSystemNestedInput = {
    create?: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
    connectOrCreate?: SlaConfigCreateOrConnectWithoutSystemInput
    upsert?: SlaConfigUpsertWithoutSystemInput
    disconnect?: SlaConfigWhereInput | boolean
    delete?: SlaConfigWhereInput | boolean
    connect?: SlaConfigWhereUniqueInput
    update?: XOR<XOR<SlaConfigUpdateToOneWithWhereWithoutSystemInput, SlaConfigUpdateWithoutSystemInput>, SlaConfigUncheckedUpdateWithoutSystemInput>
  }

  export type SlaReportUpdateManyWithoutSystemNestedInput = {
    create?: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput> | SlaReportCreateWithoutSystemInput[] | SlaReportUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: SlaReportCreateOrConnectWithoutSystemInput | SlaReportCreateOrConnectWithoutSystemInput[]
    upsert?: SlaReportUpsertWithWhereUniqueWithoutSystemInput | SlaReportUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: SlaReportCreateManySystemInputEnvelope
    set?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    disconnect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    delete?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    connect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    update?: SlaReportUpdateWithWhereUniqueWithoutSystemInput | SlaReportUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: SlaReportUpdateManyWithWhereWithoutSystemInput | SlaReportUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: SlaReportScalarWhereInput | SlaReportScalarWhereInput[]
  }

  export type StatusLogUncheckedUpdateManyWithoutSystemNestedInput = {
    create?: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput> | StatusLogCreateWithoutSystemInput[] | StatusLogUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: StatusLogCreateOrConnectWithoutSystemInput | StatusLogCreateOrConnectWithoutSystemInput[]
    upsert?: StatusLogUpsertWithWhereUniqueWithoutSystemInput | StatusLogUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: StatusLogCreateManySystemInputEnvelope
    set?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    disconnect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    delete?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    connect?: StatusLogWhereUniqueInput | StatusLogWhereUniqueInput[]
    update?: StatusLogUpdateWithWhereUniqueWithoutSystemInput | StatusLogUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: StatusLogUpdateManyWithWhereWithoutSystemInput | StatusLogUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: StatusLogScalarWhereInput | StatusLogScalarWhereInput[]
  }

  export type AlertUncheckedUpdateManyWithoutSystemNestedInput = {
    create?: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput> | AlertCreateWithoutSystemInput[] | AlertUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: AlertCreateOrConnectWithoutSystemInput | AlertCreateOrConnectWithoutSystemInput[]
    upsert?: AlertUpsertWithWhereUniqueWithoutSystemInput | AlertUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: AlertCreateManySystemInputEnvelope
    set?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    disconnect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    delete?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    connect?: AlertWhereUniqueInput | AlertWhereUniqueInput[]
    update?: AlertUpdateWithWhereUniqueWithoutSystemInput | AlertUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: AlertUpdateManyWithWhereWithoutSystemInput | AlertUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: AlertScalarWhereInput | AlertScalarWhereInput[]
  }

  export type SlaConfigUncheckedUpdateOneWithoutSystemNestedInput = {
    create?: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
    connectOrCreate?: SlaConfigCreateOrConnectWithoutSystemInput
    upsert?: SlaConfigUpsertWithoutSystemInput
    disconnect?: SlaConfigWhereInput | boolean
    delete?: SlaConfigWhereInput | boolean
    connect?: SlaConfigWhereUniqueInput
    update?: XOR<XOR<SlaConfigUpdateToOneWithWhereWithoutSystemInput, SlaConfigUpdateWithoutSystemInput>, SlaConfigUncheckedUpdateWithoutSystemInput>
  }

  export type SlaReportUncheckedUpdateManyWithoutSystemNestedInput = {
    create?: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput> | SlaReportCreateWithoutSystemInput[] | SlaReportUncheckedCreateWithoutSystemInput[]
    connectOrCreate?: SlaReportCreateOrConnectWithoutSystemInput | SlaReportCreateOrConnectWithoutSystemInput[]
    upsert?: SlaReportUpsertWithWhereUniqueWithoutSystemInput | SlaReportUpsertWithWhereUniqueWithoutSystemInput[]
    createMany?: SlaReportCreateManySystemInputEnvelope
    set?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    disconnect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    delete?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    connect?: SlaReportWhereUniqueInput | SlaReportWhereUniqueInput[]
    update?: SlaReportUpdateWithWhereUniqueWithoutSystemInput | SlaReportUpdateWithWhereUniqueWithoutSystemInput[]
    updateMany?: SlaReportUpdateManyWithWhereWithoutSystemInput | SlaReportUpdateManyWithWhereWithoutSystemInput[]
    deleteMany?: SlaReportScalarWhereInput | SlaReportScalarWhereInput[]
  }

  export type SystemCreateNestedOneWithoutStatus_logsInput = {
    create?: XOR<SystemCreateWithoutStatus_logsInput, SystemUncheckedCreateWithoutStatus_logsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutStatus_logsInput
    connect?: SystemWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SystemUpdateOneRequiredWithoutStatus_logsNestedInput = {
    create?: XOR<SystemCreateWithoutStatus_logsInput, SystemUncheckedCreateWithoutStatus_logsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutStatus_logsInput
    upsert?: SystemUpsertWithoutStatus_logsInput
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutStatus_logsInput, SystemUpdateWithoutStatus_logsInput>, SystemUncheckedUpdateWithoutStatus_logsInput>
  }

  export type SystemCreateNestedOneWithoutAlertsInput = {
    create?: XOR<SystemCreateWithoutAlertsInput, SystemUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutAlertsInput
    connect?: SystemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAlerts_ackInput = {
    create?: XOR<UserCreateWithoutAlerts_ackInput, UserUncheckedCreateWithoutAlerts_ackInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlerts_ackInput
    connect?: UserWhereUniqueInput
  }

  export type EnumAlertSeverityFieldUpdateOperationsInput = {
    set?: $Enums.AlertSeverity
  }

  export type EnumAlertStatusFieldUpdateOperationsInput = {
    set?: $Enums.AlertStatus
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type SystemUpdateOneRequiredWithoutAlertsNestedInput = {
    create?: XOR<SystemCreateWithoutAlertsInput, SystemUncheckedCreateWithoutAlertsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutAlertsInput
    upsert?: SystemUpsertWithoutAlertsInput
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutAlertsInput, SystemUpdateWithoutAlertsInput>, SystemUncheckedUpdateWithoutAlertsInput>
  }

  export type UserUpdateOneWithoutAlerts_ackNestedInput = {
    create?: XOR<UserCreateWithoutAlerts_ackInput, UserUncheckedCreateWithoutAlerts_ackInput>
    connectOrCreate?: UserCreateOrConnectWithoutAlerts_ackInput
    upsert?: UserUpsertWithoutAlerts_ackInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAlerts_ackInput, UserUpdateWithoutAlerts_ackInput>, UserUncheckedUpdateWithoutAlerts_ackInput>
  }

  export type SystemCreateNestedOneWithoutSla_configsInput = {
    create?: XOR<SystemCreateWithoutSla_configsInput, SystemUncheckedCreateWithoutSla_configsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutSla_configsInput
    connect?: SystemWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SystemUpdateOneRequiredWithoutSla_configsNestedInput = {
    create?: XOR<SystemCreateWithoutSla_configsInput, SystemUncheckedCreateWithoutSla_configsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutSla_configsInput
    upsert?: SystemUpsertWithoutSla_configsInput
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutSla_configsInput, SystemUpdateWithoutSla_configsInput>, SystemUncheckedUpdateWithoutSla_configsInput>
  }

  export type SystemCreateNestedOneWithoutSla_reportsInput = {
    create?: XOR<SystemCreateWithoutSla_reportsInput, SystemUncheckedCreateWithoutSla_reportsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutSla_reportsInput
    connect?: SystemWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SystemUpdateOneRequiredWithoutSla_reportsNestedInput = {
    create?: XOR<SystemCreateWithoutSla_reportsInput, SystemUncheckedCreateWithoutSla_reportsInput>
    connectOrCreate?: SystemCreateOrConnectWithoutSla_reportsInput
    upsert?: SystemUpsertWithoutSla_reportsInput
    connect?: SystemWhereUniqueInput
    update?: XOR<XOR<SystemUpdateToOneWithWhereWithoutSla_reportsInput, SystemUpdateWithoutSla_reportsInput>, SystemUncheckedUpdateWithoutSla_reportsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumMonitorTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MonitorType | EnumMonitorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MonitorType[]
    notIn?: $Enums.MonitorType[]
    not?: NestedEnumMonitorTypeFilter<$PrismaModel> | $Enums.MonitorType
  }

  export type NestedEnumSystemStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SystemStatus | EnumSystemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SystemStatus[]
    notIn?: $Enums.SystemStatus[]
    not?: NestedEnumSystemStatusFilter<$PrismaModel> | $Enums.SystemStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumMonitorTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MonitorType | EnumMonitorTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MonitorType[]
    notIn?: $Enums.MonitorType[]
    not?: NestedEnumMonitorTypeWithAggregatesFilter<$PrismaModel> | $Enums.MonitorType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMonitorTypeFilter<$PrismaModel>
    _max?: NestedEnumMonitorTypeFilter<$PrismaModel>
  }

  export type NestedEnumSystemStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SystemStatus | EnumSystemStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SystemStatus[]
    notIn?: $Enums.SystemStatus[]
    not?: NestedEnumSystemStatusWithAggregatesFilter<$PrismaModel> | $Enums.SystemStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSystemStatusFilter<$PrismaModel>
    _max?: NestedEnumSystemStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumAlertSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[]
    notIn?: $Enums.AlertSeverity[]
    not?: NestedEnumAlertSeverityFilter<$PrismaModel> | $Enums.AlertSeverity
  }

  export type NestedEnumAlertStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[]
    notIn?: $Enums.AlertStatus[]
    not?: NestedEnumAlertStatusFilter<$PrismaModel> | $Enums.AlertStatus
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertSeverity | EnumAlertSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.AlertSeverity[]
    notIn?: $Enums.AlertSeverity[]
    not?: NestedEnumAlertSeverityWithAggregatesFilter<$PrismaModel> | $Enums.AlertSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertSeverityFilter<$PrismaModel>
    _max?: NestedEnumAlertSeverityFilter<$PrismaModel>
  }

  export type NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AlertStatus | EnumAlertStatusFieldRefInput<$PrismaModel>
    in?: $Enums.AlertStatus[]
    notIn?: $Enums.AlertStatus[]
    not?: NestedEnumAlertStatusWithAggregatesFilter<$PrismaModel> | $Enums.AlertStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAlertStatusFilter<$PrismaModel>
    _max?: NestedEnumAlertStatusFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SystemCreateWithoutCreatedByInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogCreateNestedManyWithoutSystemInput
    alerts?: AlertCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogUncheckedCreateNestedManyWithoutSystemInput
    alerts?: AlertUncheckedCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigUncheckedCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutCreatedByInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput>
  }

  export type SystemCreateManyCreatedByInputEnvelope = {
    data: SystemCreateManyCreatedByInput | SystemCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutAcknowledgedByInput = {
    id?: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
    system: SystemCreateNestedOneWithoutAlertsInput
  }

  export type AlertUncheckedCreateWithoutAcknowledgedByInput = {
    id?: string
    system_id: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type AlertCreateOrConnectWithoutAcknowledgedByInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput>
  }

  export type AlertCreateManyAcknowledgedByInputEnvelope = {
    data: AlertCreateManyAcknowledgedByInput | AlertCreateManyAcknowledgedByInput[]
    skipDuplicates?: boolean
  }

  export type Audit_logsCreateWithoutUserInput = {
    id?: string
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
  }

  export type Audit_logsUncheckedCreateWithoutUserInput = {
    id?: string
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
  }

  export type Audit_logsCreateOrConnectWithoutUserInput = {
    where: Audit_logsWhereUniqueInput
    create: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput>
  }

  export type Audit_logsCreateManyUserInputEnvelope = {
    data: Audit_logsCreateManyUserInput | Audit_logsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SystemUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: SystemWhereUniqueInput
    update: XOR<SystemUpdateWithoutCreatedByInput, SystemUncheckedUpdateWithoutCreatedByInput>
    create: XOR<SystemCreateWithoutCreatedByInput, SystemUncheckedCreateWithoutCreatedByInput>
  }

  export type SystemUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: SystemWhereUniqueInput
    data: XOR<SystemUpdateWithoutCreatedByInput, SystemUncheckedUpdateWithoutCreatedByInput>
  }

  export type SystemUpdateManyWithWhereWithoutCreatedByInput = {
    where: SystemScalarWhereInput
    data: XOR<SystemUpdateManyMutationInput, SystemUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type SystemScalarWhereInput = {
    AND?: SystemScalarWhereInput | SystemScalarWhereInput[]
    OR?: SystemScalarWhereInput[]
    NOT?: SystemScalarWhereInput | SystemScalarWhereInput[]
    id?: StringFilter<"System"> | string
    name?: StringFilter<"System"> | string
    url?: StringFilter<"System"> | string
    monitor_type?: EnumMonitorTypeFilter<"System"> | $Enums.MonitorType
    check_interval?: IntFilter<"System"> | number
    timeout?: IntFilter<"System"> | number
    status?: EnumSystemStatusFilter<"System"> | $Enums.SystemStatus
    is_enabled?: BoolFilter<"System"> | boolean
    alert_email?: StringFilter<"System"> | string
    description?: StringFilter<"System"> | string
    created_by?: StringFilter<"System"> | string
    created_at?: DateTimeFilter<"System"> | Date | string
    updated_at?: DateTimeFilter<"System"> | Date | string
  }

  export type AlertUpsertWithWhereUniqueWithoutAcknowledgedByInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutAcknowledgedByInput, AlertUncheckedUpdateWithoutAcknowledgedByInput>
    create: XOR<AlertCreateWithoutAcknowledgedByInput, AlertUncheckedCreateWithoutAcknowledgedByInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutAcknowledgedByInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutAcknowledgedByInput, AlertUncheckedUpdateWithoutAcknowledgedByInput>
  }

  export type AlertUpdateManyWithWhereWithoutAcknowledgedByInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutAcknowledgedByInput>
  }

  export type AlertScalarWhereInput = {
    AND?: AlertScalarWhereInput | AlertScalarWhereInput[]
    OR?: AlertScalarWhereInput[]
    NOT?: AlertScalarWhereInput | AlertScalarWhereInput[]
    id?: StringFilter<"Alert"> | string
    system_id?: StringFilter<"Alert"> | string
    severity?: EnumAlertSeverityFilter<"Alert"> | $Enums.AlertSeverity
    status?: EnumAlertStatusFilter<"Alert"> | $Enums.AlertStatus
    title?: StringFilter<"Alert"> | string
    message?: StringFilter<"Alert"> | string
    acknowledged_by?: StringNullableFilter<"Alert"> | string | null
    acknowledged_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    resolved_at?: DateTimeNullableFilter<"Alert"> | Date | string | null
    created_at?: DateTimeFilter<"Alert"> | Date | string
  }

  export type Audit_logsUpsertWithWhereUniqueWithoutUserInput = {
    where: Audit_logsWhereUniqueInput
    update: XOR<Audit_logsUpdateWithoutUserInput, Audit_logsUncheckedUpdateWithoutUserInput>
    create: XOR<Audit_logsCreateWithoutUserInput, Audit_logsUncheckedCreateWithoutUserInput>
  }

  export type Audit_logsUpdateWithWhereUniqueWithoutUserInput = {
    where: Audit_logsWhereUniqueInput
    data: XOR<Audit_logsUpdateWithoutUserInput, Audit_logsUncheckedUpdateWithoutUserInput>
  }

  export type Audit_logsUpdateManyWithWhereWithoutUserInput = {
    where: Audit_logsScalarWhereInput
    data: XOR<Audit_logsUpdateManyMutationInput, Audit_logsUncheckedUpdateManyWithoutUserInput>
  }

  export type Audit_logsScalarWhereInput = {
    AND?: Audit_logsScalarWhereInput | Audit_logsScalarWhereInput[]
    OR?: Audit_logsScalarWhereInput[]
    NOT?: Audit_logsScalarWhereInput | Audit_logsScalarWhereInput[]
    id?: StringFilter<"Audit_logs"> | string
    user_id?: StringNullableFilter<"Audit_logs"> | string | null
    method?: StringFilter<"Audit_logs"> | string
    url?: StringFilter<"Audit_logs"> | string
    ip?: StringFilter<"Audit_logs"> | string
    status_code?: IntFilter<"Audit_logs"> | number
    duration_ms?: IntFilter<"Audit_logs"> | number
    params?: StringNullableFilter<"Audit_logs"> | string | null
    query?: StringNullableFilter<"Audit_logs"> | string | null
    body?: StringNullableFilter<"Audit_logs"> | string | null
    timestamp?: DateTimeFilter<"Audit_logs"> | Date | string
  }

  export type UserCreateWithoutAudit_logsInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemCreateNestedManyWithoutCreatedByInput
    alerts_ack?: AlertCreateNestedManyWithoutAcknowledgedByInput
  }

  export type UserUncheckedCreateWithoutAudit_logsInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemUncheckedCreateNestedManyWithoutCreatedByInput
    alerts_ack?: AlertUncheckedCreateNestedManyWithoutAcknowledgedByInput
  }

  export type UserCreateOrConnectWithoutAudit_logsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
  }

  export type UserUpsertWithoutAudit_logsInput = {
    update: XOR<UserUpdateWithoutAudit_logsInput, UserUncheckedUpdateWithoutAudit_logsInput>
    create: XOR<UserCreateWithoutAudit_logsInput, UserUncheckedCreateWithoutAudit_logsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAudit_logsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAudit_logsInput, UserUncheckedUpdateWithoutAudit_logsInput>
  }

  export type UserUpdateWithoutAudit_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUpdateManyWithoutCreatedByNestedInput
    alerts_ack?: AlertUpdateManyWithoutAcknowledgedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAudit_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUncheckedUpdateManyWithoutCreatedByNestedInput
    alerts_ack?: AlertUncheckedUpdateManyWithoutAcknowledgedByNestedInput
  }

  export type UserCreateWithoutSystemsInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    alerts_ack?: AlertCreateNestedManyWithoutAcknowledgedByInput
    audit_logs?: Audit_logsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSystemsInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    alerts_ack?: AlertUncheckedCreateNestedManyWithoutAcknowledgedByInput
    audit_logs?: Audit_logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSystemsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSystemsInput, UserUncheckedCreateWithoutSystemsInput>
  }

  export type StatusLogCreateWithoutSystemInput = {
    id?: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
  }

  export type StatusLogUncheckedCreateWithoutSystemInput = {
    id?: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
  }

  export type StatusLogCreateOrConnectWithoutSystemInput = {
    where: StatusLogWhereUniqueInput
    create: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput>
  }

  export type StatusLogCreateManySystemInputEnvelope = {
    data: StatusLogCreateManySystemInput | StatusLogCreateManySystemInput[]
    skipDuplicates?: boolean
  }

  export type AlertCreateWithoutSystemInput = {
    id?: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
    acknowledgedBy?: UserCreateNestedOneWithoutAlerts_ackInput
  }

  export type AlertUncheckedCreateWithoutSystemInput = {
    id?: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_by?: string | null
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type AlertCreateOrConnectWithoutSystemInput = {
    where: AlertWhereUniqueInput
    create: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput>
  }

  export type AlertCreateManySystemInputEnvelope = {
    data: AlertCreateManySystemInput | AlertCreateManySystemInput[]
    skipDuplicates?: boolean
  }

  export type SlaConfigCreateWithoutSystemInput = {
    id?: string
    uptime_target?: number
    response_time_target?: number
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SlaConfigUncheckedCreateWithoutSystemInput = {
    id?: string
    uptime_target?: number
    response_time_target?: number
    alert_on_sla_violation?: boolean
    alert_threshold_minutes?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type SlaConfigCreateOrConnectWithoutSystemInput = {
    where: SlaConfigWhereUniqueInput
    create: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
  }

  export type SlaReportCreateWithoutSystemInput = {
    id?: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
  }

  export type SlaReportUncheckedCreateWithoutSystemInput = {
    id?: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
  }

  export type SlaReportCreateOrConnectWithoutSystemInput = {
    where: SlaReportWhereUniqueInput
    create: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput>
  }

  export type SlaReportCreateManySystemInputEnvelope = {
    data: SlaReportCreateManySystemInput | SlaReportCreateManySystemInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutSystemsInput = {
    update: XOR<UserUpdateWithoutSystemsInput, UserUncheckedUpdateWithoutSystemsInput>
    create: XOR<UserCreateWithoutSystemsInput, UserUncheckedCreateWithoutSystemsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSystemsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSystemsInput, UserUncheckedUpdateWithoutSystemsInput>
  }

  export type UserUpdateWithoutSystemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts_ack?: AlertUpdateManyWithoutAcknowledgedByNestedInput
    audit_logs?: Audit_logsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSystemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts_ack?: AlertUncheckedUpdateManyWithoutAcknowledgedByNestedInput
    audit_logs?: Audit_logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StatusLogUpsertWithWhereUniqueWithoutSystemInput = {
    where: StatusLogWhereUniqueInput
    update: XOR<StatusLogUpdateWithoutSystemInput, StatusLogUncheckedUpdateWithoutSystemInput>
    create: XOR<StatusLogCreateWithoutSystemInput, StatusLogUncheckedCreateWithoutSystemInput>
  }

  export type StatusLogUpdateWithWhereUniqueWithoutSystemInput = {
    where: StatusLogWhereUniqueInput
    data: XOR<StatusLogUpdateWithoutSystemInput, StatusLogUncheckedUpdateWithoutSystemInput>
  }

  export type StatusLogUpdateManyWithWhereWithoutSystemInput = {
    where: StatusLogScalarWhereInput
    data: XOR<StatusLogUpdateManyMutationInput, StatusLogUncheckedUpdateManyWithoutSystemInput>
  }

  export type StatusLogScalarWhereInput = {
    AND?: StatusLogScalarWhereInput | StatusLogScalarWhereInput[]
    OR?: StatusLogScalarWhereInput[]
    NOT?: StatusLogScalarWhereInput | StatusLogScalarWhereInput[]
    id?: StringFilter<"StatusLog"> | string
    system_id?: StringFilter<"StatusLog"> | string
    status?: EnumSystemStatusFilter<"StatusLog"> | $Enums.SystemStatus
    response_time?: IntNullableFilter<"StatusLog"> | number | null
    status_code?: IntNullableFilter<"StatusLog"> | number | null
    error_message?: StringNullableFilter<"StatusLog"> | string | null
    checked_at?: DateTimeFilter<"StatusLog"> | Date | string
  }

  export type AlertUpsertWithWhereUniqueWithoutSystemInput = {
    where: AlertWhereUniqueInput
    update: XOR<AlertUpdateWithoutSystemInput, AlertUncheckedUpdateWithoutSystemInput>
    create: XOR<AlertCreateWithoutSystemInput, AlertUncheckedCreateWithoutSystemInput>
  }

  export type AlertUpdateWithWhereUniqueWithoutSystemInput = {
    where: AlertWhereUniqueInput
    data: XOR<AlertUpdateWithoutSystemInput, AlertUncheckedUpdateWithoutSystemInput>
  }

  export type AlertUpdateManyWithWhereWithoutSystemInput = {
    where: AlertScalarWhereInput
    data: XOR<AlertUpdateManyMutationInput, AlertUncheckedUpdateManyWithoutSystemInput>
  }

  export type SlaConfigUpsertWithoutSystemInput = {
    update: XOR<SlaConfigUpdateWithoutSystemInput, SlaConfigUncheckedUpdateWithoutSystemInput>
    create: XOR<SlaConfigCreateWithoutSystemInput, SlaConfigUncheckedCreateWithoutSystemInput>
    where?: SlaConfigWhereInput
  }

  export type SlaConfigUpdateToOneWithWhereWithoutSystemInput = {
    where?: SlaConfigWhereInput
    data: XOR<SlaConfigUpdateWithoutSystemInput, SlaConfigUncheckedUpdateWithoutSystemInput>
  }

  export type SlaConfigUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaConfigUncheckedUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    uptime_target?: FloatFieldUpdateOperationsInput | number
    response_time_target?: IntFieldUpdateOperationsInput | number
    alert_on_sla_violation?: BoolFieldUpdateOperationsInput | boolean
    alert_threshold_minutes?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportUpsertWithWhereUniqueWithoutSystemInput = {
    where: SlaReportWhereUniqueInput
    update: XOR<SlaReportUpdateWithoutSystemInput, SlaReportUncheckedUpdateWithoutSystemInput>
    create: XOR<SlaReportCreateWithoutSystemInput, SlaReportUncheckedCreateWithoutSystemInput>
  }

  export type SlaReportUpdateWithWhereUniqueWithoutSystemInput = {
    where: SlaReportWhereUniqueInput
    data: XOR<SlaReportUpdateWithoutSystemInput, SlaReportUncheckedUpdateWithoutSystemInput>
  }

  export type SlaReportUpdateManyWithWhereWithoutSystemInput = {
    where: SlaReportScalarWhereInput
    data: XOR<SlaReportUpdateManyMutationInput, SlaReportUncheckedUpdateManyWithoutSystemInput>
  }

  export type SlaReportScalarWhereInput = {
    AND?: SlaReportScalarWhereInput | SlaReportScalarWhereInput[]
    OR?: SlaReportScalarWhereInput[]
    NOT?: SlaReportScalarWhereInput | SlaReportScalarWhereInput[]
    id?: StringFilter<"SlaReport"> | string
    system_id?: StringFilter<"SlaReport"> | string
    month?: IntFilter<"SlaReport"> | number
    year?: IntFilter<"SlaReport"> | number
    total_checks?: IntFilter<"SlaReport"> | number
    successful_checks?: IntFilter<"SlaReport"> | number
    uptime_percentage?: FloatFilter<"SlaReport"> | number
    average_response_time?: FloatNullableFilter<"SlaReport"> | number | null
    total_downtime?: IntFilter<"SlaReport"> | number
    created_at?: DateTimeFilter<"SlaReport"> | Date | string
  }

  export type SystemCreateWithoutStatus_logsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UserCreateNestedOneWithoutSystemsInput
    alerts?: AlertCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutStatus_logsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    alerts?: AlertUncheckedCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigUncheckedCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutStatus_logsInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutStatus_logsInput, SystemUncheckedCreateWithoutStatus_logsInput>
  }

  export type SystemUpsertWithoutStatus_logsInput = {
    update: XOR<SystemUpdateWithoutStatus_logsInput, SystemUncheckedUpdateWithoutStatus_logsInput>
    create: XOR<SystemCreateWithoutStatus_logsInput, SystemUncheckedCreateWithoutStatus_logsInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutStatus_logsInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutStatus_logsInput, SystemUncheckedUpdateWithoutStatus_logsInput>
  }

  export type SystemUpdateWithoutStatus_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSystemsNestedInput
    alerts?: AlertUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutStatus_logsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    alerts?: AlertUncheckedUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUncheckedUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type SystemCreateWithoutAlertsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UserCreateNestedOneWithoutSystemsInput
    status_logs?: StatusLogCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutAlertsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogUncheckedCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigUncheckedCreateNestedOneWithoutSystemInput
    sla_reports?: SlaReportUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutAlertsInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutAlertsInput, SystemUncheckedCreateWithoutAlertsInput>
  }

  export type UserCreateWithoutAlerts_ackInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemCreateNestedManyWithoutCreatedByInput
    audit_logs?: Audit_logsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAlerts_ackInput = {
    id?: string
    email: string
    password: string
    first_name: string
    last_name: string
    profile_image_url?: string | null
    role?: $Enums.Role
    created_at?: Date | string
    updated_at?: Date | string
    systems?: SystemUncheckedCreateNestedManyWithoutCreatedByInput
    audit_logs?: Audit_logsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAlerts_ackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAlerts_ackInput, UserUncheckedCreateWithoutAlerts_ackInput>
  }

  export type SystemUpsertWithoutAlertsInput = {
    update: XOR<SystemUpdateWithoutAlertsInput, SystemUncheckedUpdateWithoutAlertsInput>
    create: XOR<SystemCreateWithoutAlertsInput, SystemUncheckedCreateWithoutAlertsInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutAlertsInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutAlertsInput, SystemUncheckedUpdateWithoutAlertsInput>
  }

  export type SystemUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSystemsNestedInput
    status_logs?: StatusLogUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutAlertsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUncheckedUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUncheckedUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type UserUpsertWithoutAlerts_ackInput = {
    update: XOR<UserUpdateWithoutAlerts_ackInput, UserUncheckedUpdateWithoutAlerts_ackInput>
    create: XOR<UserCreateWithoutAlerts_ackInput, UserUncheckedCreateWithoutAlerts_ackInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAlerts_ackInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAlerts_ackInput, UserUncheckedUpdateWithoutAlerts_ackInput>
  }

  export type UserUpdateWithoutAlerts_ackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUpdateManyWithoutCreatedByNestedInput
    audit_logs?: Audit_logsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAlerts_ackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    profile_image_url?: NullableStringFieldUpdateOperationsInput | string | null
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    systems?: SystemUncheckedUpdateManyWithoutCreatedByNestedInput
    audit_logs?: Audit_logsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SystemCreateWithoutSla_configsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UserCreateNestedOneWithoutSystemsInput
    status_logs?: StatusLogCreateNestedManyWithoutSystemInput
    alerts?: AlertCreateNestedManyWithoutSystemInput
    sla_reports?: SlaReportCreateNestedManyWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutSla_configsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogUncheckedCreateNestedManyWithoutSystemInput
    alerts?: AlertUncheckedCreateNestedManyWithoutSystemInput
    sla_reports?: SlaReportUncheckedCreateNestedManyWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutSla_configsInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutSla_configsInput, SystemUncheckedCreateWithoutSla_configsInput>
  }

  export type SystemUpsertWithoutSla_configsInput = {
    update: XOR<SystemUpdateWithoutSla_configsInput, SystemUncheckedUpdateWithoutSla_configsInput>
    create: XOR<SystemCreateWithoutSla_configsInput, SystemUncheckedCreateWithoutSla_configsInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutSla_configsInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutSla_configsInput, SystemUncheckedUpdateWithoutSla_configsInput>
  }

  export type SystemUpdateWithoutSla_configsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSystemsNestedInput
    status_logs?: StatusLogUpdateManyWithoutSystemNestedInput
    alerts?: AlertUpdateManyWithoutSystemNestedInput
    sla_reports?: SlaReportUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutSla_configsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUncheckedUpdateManyWithoutSystemNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutSystemNestedInput
    sla_reports?: SlaReportUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type SystemCreateWithoutSla_reportsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
    createdBy: UserCreateNestedOneWithoutSystemsInput
    status_logs?: StatusLogCreateNestedManyWithoutSystemInput
    alerts?: AlertCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigCreateNestedOneWithoutSystemInput
  }

  export type SystemUncheckedCreateWithoutSla_reportsInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_by: string
    created_at?: Date | string
    updated_at?: Date | string
    status_logs?: StatusLogUncheckedCreateNestedManyWithoutSystemInput
    alerts?: AlertUncheckedCreateNestedManyWithoutSystemInput
    sla_configs?: SlaConfigUncheckedCreateNestedOneWithoutSystemInput
  }

  export type SystemCreateOrConnectWithoutSla_reportsInput = {
    where: SystemWhereUniqueInput
    create: XOR<SystemCreateWithoutSla_reportsInput, SystemUncheckedCreateWithoutSla_reportsInput>
  }

  export type SystemUpsertWithoutSla_reportsInput = {
    update: XOR<SystemUpdateWithoutSla_reportsInput, SystemUncheckedUpdateWithoutSla_reportsInput>
    create: XOR<SystemCreateWithoutSla_reportsInput, SystemUncheckedCreateWithoutSla_reportsInput>
    where?: SystemWhereInput
  }

  export type SystemUpdateToOneWithWhereWithoutSla_reportsInput = {
    where?: SystemWhereInput
    data: XOR<SystemUpdateWithoutSla_reportsInput, SystemUncheckedUpdateWithoutSla_reportsInput>
  }

  export type SystemUpdateWithoutSla_reportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutSystemsNestedInput
    status_logs?: StatusLogUpdateManyWithoutSystemNestedInput
    alerts?: AlertUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUpdateOneWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutSla_reportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_by?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUncheckedUpdateManyWithoutSystemNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUncheckedUpdateOneWithoutSystemNestedInput
  }

  export type SystemCreateManyCreatedByInput = {
    id?: string
    name: string
    url: string
    monitor_type: $Enums.MonitorType
    check_interval?: number
    timeout?: number
    status?: $Enums.SystemStatus
    is_enabled?: boolean
    alert_email: string
    description: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type AlertCreateManyAcknowledgedByInput = {
    id?: string
    system_id: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type Audit_logsCreateManyUserInput = {
    id?: string
    method: string
    url: string
    ip: string
    status_code: number
    duration_ms: number
    params?: string | null
    query?: string | null
    body?: string | null
    timestamp?: Date | string
  }

  export type SystemUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUpdateManyWithoutSystemNestedInput
    alerts?: AlertUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    status_logs?: StatusLogUncheckedUpdateManyWithoutSystemNestedInput
    alerts?: AlertUncheckedUpdateManyWithoutSystemNestedInput
    sla_configs?: SlaConfigUncheckedUpdateOneWithoutSystemNestedInput
    sla_reports?: SlaReportUncheckedUpdateManyWithoutSystemNestedInput
  }

  export type SystemUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    monitor_type?: EnumMonitorTypeFieldUpdateOperationsInput | $Enums.MonitorType
    check_interval?: IntFieldUpdateOperationsInput | number
    timeout?: IntFieldUpdateOperationsInput | number
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    is_enabled?: BoolFieldUpdateOperationsInput | boolean
    alert_email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUpdateWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    system?: SystemUpdateOneRequiredWithoutAlertsNestedInput
  }

  export type AlertUncheckedUpdateWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyWithoutAcknowledgedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    system_id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type Audit_logsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    ip?: StringFieldUpdateOperationsInput | string
    status_code?: IntFieldUpdateOperationsInput | number
    duration_ms?: IntFieldUpdateOperationsInput | number
    params?: NullableStringFieldUpdateOperationsInput | string | null
    query?: NullableStringFieldUpdateOperationsInput | string | null
    body?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogCreateManySystemInput = {
    id?: string
    status: $Enums.SystemStatus
    response_time?: number | null
    status_code?: number | null
    error_message?: string | null
    checked_at?: Date | string
  }

  export type AlertCreateManySystemInput = {
    id?: string
    severity: $Enums.AlertSeverity
    status?: $Enums.AlertStatus
    title: string
    message: string
    acknowledged_by?: string | null
    acknowledged_at?: Date | string | null
    resolved_at?: Date | string | null
    created_at?: Date | string
  }

  export type SlaReportCreateManySystemInput = {
    id?: string
    month: number
    year: number
    total_checks?: number
    successful_checks?: number
    uptime_percentage?: number
    average_response_time?: number | null
    total_downtime?: number
    created_at?: Date | string
  }

  export type StatusLogUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogUncheckedUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StatusLogUncheckedUpdateManyWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: EnumSystemStatusFieldUpdateOperationsInput | $Enums.SystemStatus
    response_time?: NullableIntFieldUpdateOperationsInput | number | null
    status_code?: NullableIntFieldUpdateOperationsInput | number | null
    error_message?: NullableStringFieldUpdateOperationsInput | string | null
    checked_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    acknowledgedBy?: UserUpdateOneWithoutAlerts_ackNestedInput
  }

  export type AlertUncheckedUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_by?: NullableStringFieldUpdateOperationsInput | string | null
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlertUncheckedUpdateManyWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    severity?: EnumAlertSeverityFieldUpdateOperationsInput | $Enums.AlertSeverity
    status?: EnumAlertStatusFieldUpdateOperationsInput | $Enums.AlertStatus
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    acknowledged_by?: NullableStringFieldUpdateOperationsInput | string | null
    acknowledged_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolved_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportUncheckedUpdateWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SlaReportUncheckedUpdateManyWithoutSystemInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    total_checks?: IntFieldUpdateOperationsInput | number
    successful_checks?: IntFieldUpdateOperationsInput | number
    uptime_percentage?: FloatFieldUpdateOperationsInput | number
    average_response_time?: NullableFloatFieldUpdateOperationsInput | number | null
    total_downtime?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}