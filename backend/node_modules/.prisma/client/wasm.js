
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.SessionsScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  profile_image_url: 'profile_image_url',
  role: 'role',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Audit_logsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  method: 'method',
  url: 'url',
  ip: 'ip',
  status_code: 'status_code',
  duration_ms: 'duration_ms',
  params: 'params',
  query: 'query',
  body: 'body',
  timestamp: 'timestamp'
};

exports.Prisma.SystemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  monitor_type: 'monitor_type',
  check_interval: 'check_interval',
  timeout: 'timeout',
  status: 'status',
  is_enabled: 'is_enabled',
  alert_email: 'alert_email',
  description: 'description',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.StatusLogScalarFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  status: 'status',
  response_time: 'response_time',
  status_code: 'status_code',
  error_message: 'error_message',
  checked_at: 'checked_at'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  severity: 'severity',
  status: 'status',
  title: 'title',
  message: 'message',
  acknowledged_by: 'acknowledged_by',
  acknowledged_at: 'acknowledged_at',
  resolved_at: 'resolved_at',
  created_at: 'created_at'
};

exports.Prisma.SlaConfigScalarFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  uptime_target: 'uptime_target',
  response_time_target: 'response_time_target',
  alert_on_sla_violation: 'alert_on_sla_violation',
  alert_threshold_minutes: 'alert_threshold_minutes',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SlaReportScalarFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  month: 'month',
  year: 'year',
  total_checks: 'total_checks',
  successful_checks: 'successful_checks',
  uptime_percentage: 'uptime_percentage',
  average_response_time: 'average_response_time',
  total_downtime: 'total_downtime',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.SessionsOrderByRelevanceFieldEnum = {
  sid: 'sid'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  profile_image_url: 'profile_image_url'
};

exports.Prisma.Audit_logsOrderByRelevanceFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  method: 'method',
  url: 'url',
  ip: 'ip',
  params: 'params',
  query: 'query',
  body: 'body'
};

exports.Prisma.SystemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  url: 'url',
  alert_email: 'alert_email',
  description: 'description',
  created_by: 'created_by'
};

exports.Prisma.StatusLogOrderByRelevanceFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  error_message: 'error_message'
};

exports.Prisma.AlertOrderByRelevanceFieldEnum = {
  id: 'id',
  system_id: 'system_id',
  title: 'title',
  message: 'message',
  acknowledged_by: 'acknowledged_by'
};

exports.Prisma.SlaConfigOrderByRelevanceFieldEnum = {
  id: 'id',
  system_id: 'system_id'
};

exports.Prisma.SlaReportOrderByRelevanceFieldEnum = {
  id: 'id',
  system_id: 'system_id'
};
exports.Role = exports.$Enums.Role = {
  admin: 'admin',
  operator: 'operator',
  viewer: 'viewer'
};

exports.MonitorType = exports.$Enums.MonitorType = {
  http: 'http',
  https: 'https',
  ping: 'ping',
  tcp: 'tcp'
};

exports.SystemStatus = exports.$Enums.SystemStatus = {
  up: 'up',
  down: 'down',
  warning: 'warning',
  unknown: 'unknown'
};

exports.AlertSeverity = exports.$Enums.AlertSeverity = {
  critical: 'critical',
  warning: 'warning',
  info: 'info'
};

exports.AlertStatus = exports.$Enums.AlertStatus = {
  active: 'active',
  resolved: 'resolved',
  acknowledged: 'acknowledged'
};

exports.Prisma.ModelName = {
  Sessions: 'Sessions',
  User: 'User',
  Audit_logs: 'Audit_logs',
  System: 'System',
  StatusLog: 'StatusLog',
  Alert: 'Alert',
  SlaConfig: 'SlaConfig',
  SlaReport: 'SlaReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
